ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m7
   3              		.eabi_attribute 28, 1
   4              		.fpu fpv5-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.syntax unified
  16              		.file	"tasks.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	prvTaskIsTaskSuspended:
  26              	.LFB15:
  27              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 2


  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 3


  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 4


 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 5


 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 6


 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 7


 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ] = { 0 };/*< Prioritised rea
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1 = { 0 };						/*< Delayed tasks. */
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2 = { 0 };						/*< Delayed tasks (two lists are used
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList = NULL;				/*< Points to the delayed tas
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList = NULL;		/*< Points to the delay
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList = { 0 };						/*< Tasks that have been readied whil
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xTasksWaitingTermination = { 0 };				/*< Tasks that have been deleted
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList = { 0 };					/*< Tasks that are currently suspend
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 8


 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 9


 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 10


 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 11


 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 12


 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 13


 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 14


 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 15


 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 16


 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 17


 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 18


 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 19


1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 20


1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 21


1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 22


1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 23


1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 24


1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 25


1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 26


1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 27


1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 28


1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 29


1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 30


1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 31


1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 32


1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 33


  28              		.loc 1 1798 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  34              		.loc 1 1806 0
  35 0000 40B9     		cbnz	r0, .L2
  36              	.LBB108:
  37              	.LBB109:
  38              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 34


  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 35


  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 36


 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  39              		.loc 2 195 0
  40              		.syntax unified
  41              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  42 0002 4FF05003 			mov r3, #80												
  43 0006 83F31188 		msr basepri, r3											
  44 000a BFF36F8F 		isb														
  45 000e BFF34F8F 		dsb														
  46              	
  47              	@ 0 "" 2
  48              	.LVL1:
  49              		.thumb
  50              		.syntax unified
  51              	.L3:
  52 0012 FEE7     		b	.L3
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 37


  53              	.L2:
  54              	.LBE109:
  55              	.LBE108:
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  56              		.loc 1 1809 0
  57 0014 4169     		ldr	r1, [r0, #20]
  58 0016 084A     		ldr	r2, .L8
  59 0018 9142     		cmp	r1, r2
  60 001a 06D1     		bne	.L5
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  61              		.loc 1 1812 0
  62 001c 836A     		ldr	r3, [r0, #40]
  63 001e 074A     		ldr	r2, .L8+4
  64 0020 9342     		cmp	r3, r2
  65 0022 04D0     		beq	.L6
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  66              		.loc 1 1816 0
  67 0024 2BB1     		cbz	r3, .L7
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
  68              		.loc 1 1799 0
  69 0026 0020     		movs	r0, #0
  70              	.LVL2:
  71 0028 7047     		bx	lr
  72              	.LVL3:
  73              	.L5:
  74 002a 0020     		movs	r0, #0
  75              	.LVL4:
  76 002c 7047     		bx	lr
  77              	.LVL5:
  78              	.L6:
  79 002e 0020     		movs	r0, #0
  80              	.LVL6:
  81 0030 7047     		bx	lr
  82              	.LVL7:
  83              	.L7:
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  84              		.loc 1 1818 0
  85 0032 0120     		movs	r0, #1
  86              	.LVL8:
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 38


1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  87              		.loc 1 1836 0
  88 0034 7047     		bx	lr
  89              	.L9:
  90 0036 00BF     		.align	2
  91              	.L8:
  92 0038 00000000 		.word	.LANCHOR0
  93 003c 00000000 		.word	.LANCHOR1
  94              		.cfi_endproc
  95              	.LFE15:
  97              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
  98              		.align	2
  99              		.thumb
 100              		.thumb_func
 102              	prvResetNextTaskUnblockTime:
 103              	.LFB40:
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 39


1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 40


1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 41


1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 42


2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 43


2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 44


2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 45


2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 46


2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 47


2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 48


2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 49


2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 50


2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 51


2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 52


2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 53


2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 54


2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 55


2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 56


2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 57


2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 58


2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 59


3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 60


3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 61


3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 62


3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 63


3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 64


3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 65


3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 66


3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 67


3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 68


3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 69


3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 70


3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 71


3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 72


3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 73


3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 74


3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 104              		.loc 1 3881 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 0, uses_anonymous_args = 0
 108              		@ link register save eliminated.
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 109              		.loc 1 3884 0
 110 0000 084B     		ldr	r3, .L13
 111 0002 1B68     		ldr	r3, [r3]
 112 0004 1B68     		ldr	r3, [r3]
 113 0006 23B9     		cbnz	r3, .L11
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 114              		.loc 1 3890 0
 115 0008 4FF0FF32 		mov	r2, #-1
 116 000c 064B     		ldr	r3, .L13+4
 117 000e 1A60     		str	r2, [r3]
 118 0010 7047     		bx	lr
 119              	.L11:
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
 120              		.loc 1 3898 0
 121 0012 044B     		ldr	r3, .L13
 122 0014 1B68     		ldr	r3, [r3]
 123 0016 DB68     		ldr	r3, [r3, #12]
 124 0018 DB68     		ldr	r3, [r3, #12]
 125              	.LVL9:
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 126              		.loc 1 3899 0
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 75


 127 001a 5A68     		ldr	r2, [r3, #4]
 128 001c 024B     		ldr	r3, .L13+4
 129              	.LVL10:
 130 001e 1A60     		str	r2, [r3]
 131 0020 7047     		bx	lr
 132              	.L14:
 133 0022 00BF     		.align	2
 134              	.L13:
 135 0024 00000000 		.word	.LANCHOR2
 136 0028 00000000 		.word	.LANCHOR3
 137              		.cfi_endproc
 138              	.LFE40:
 140              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 141              		.align	2
 142              		.thumb
 143              		.thumb_func
 145              	prvInitialiseNewTask:
 146              	.LFB7:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 147              		.loc 1 829 0
 148              		.cfi_startproc
 149              		@ args = 16, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151              	.LVL11:
 152 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 153              	.LCFI0:
 154              		.cfi_def_cfa_offset 32
 155              		.cfi_offset 4, -32
 156              		.cfi_offset 5, -28
 157              		.cfi_offset 6, -24
 158              		.cfi_offset 7, -20
 159              		.cfi_offset 8, -16
 160              		.cfi_offset 9, -12
 161              		.cfi_offset 10, -8
 162              		.cfi_offset 14, -4
 163 0004 8046     		mov	r8, r0
 164 0006 9946     		mov	r9, r3
 165 0008 089D     		ldr	r5, [sp, #32]
 166 000a 099F     		ldr	r7, [sp, #36]
 167 000c 0A9C     		ldr	r4, [sp, #40]
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 168              		.loc 1 861 0
 169 000e 236B     		ldr	r3, [r4, #48]
 170              	.LVL12:
 171 0010 6FF04046 		mvn	r6, #-1073741824
 172 0014 1644     		add	r6, r6, r2
 173 0016 03EB8606 		add	r6, r3, r6, lsl #2
 174              	.LVL13:
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 175              		.loc 1 862 0
 176 001a 26F00706 		bic	r6, r6, #7
 177              	.LVL14:
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 178              		.loc 1 889 0
 179 001e 41B9     		cbnz	r1, .L23
 180 0020 0FE0     		b	.L25
 181              	.LVL15:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 76


 182              	.L19:
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 183              		.loc 1 893 0
 184 0022 D05C     		ldrb	r0, [r2, r3]	@ zero_extendqisi2
 185 0024 E118     		adds	r1, r4, r3
 186 0026 81F83400 		strb	r0, [r1, #52]
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 187              		.loc 1 898 0
 188 002a D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 189 002c 29B1     		cbz	r1, .L18
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 190              		.loc 1 891 0 discriminator 2
 191 002e 0133     		adds	r3, r3, #1
 192              	.LVL16:
 193 0030 01E0     		b	.L16
 194              	.LVL17:
 195              	.L23:
 196 0032 0A46     		mov	r2, r1
 197              	.LVL18:
 198 0034 0023     		movs	r3, #0
 199              	.LVL19:
 200              	.L16:
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 201              		.loc 1 891 0 is_stmt 0 discriminator 1
 202 0036 0F2B     		cmp	r3, #15
 203 0038 F3D9     		bls	.L19
 204              	.L18:
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 205              		.loc 1 910 0 is_stmt 1
 206 003a 0023     		movs	r3, #0
 207              	.LVL20:
 208 003c 84F84330 		strb	r3, [r4, #67]
 209 0040 02E0     		b	.L20
 210              	.LVL21:
 211              	.L25:
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 212              		.loc 1 916 0
 213 0042 0023     		movs	r3, #0
 214 0044 84F83430 		strb	r3, [r4, #52]
 215              	.LVL22:
 216              	.L20:
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 217              		.loc 1 921 0
 218 0048 062D     		cmp	r5, #6
 219 004a 00D9     		bls	.L21
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 220              		.loc 1 923 0
 221 004c 0625     		movs	r5, #6
 222              	.L21:
 223              	.LVL23:
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 224              		.loc 1 930 0
 225 004e E562     		str	r5, [r4, #44]
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 226              		.loc 1 933 0
 227 0050 6564     		str	r5, [r4, #68]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 77


 228              		.loc 1 934 0
 229 0052 4FF0000A 		mov	r10, #0
 230 0056 C4F848A0 		str	r10, [r4, #72]
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 231              		.loc 1 938 0
 232 005a 201D     		adds	r0, r4, #4
 233 005c FFF7FEFF 		bl	vListInitialiseItem
 234              	.LVL24:
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 235              		.loc 1 939 0
 236 0060 04F11800 		add	r0, r4, #24
 237 0064 FFF7FEFF 		bl	vListInitialiseItem
 238              	.LVL25:
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 239              		.loc 1 943 0
 240 0068 2461     		str	r4, [r4, #16]
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 241              		.loc 1 946 0
 242 006a C5F10705 		rsb	r5, r5, #7
 243              	.LVL26:
 244 006e A561     		str	r5, [r4, #24]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 245              		.loc 1 947 0
 246 0070 6462     		str	r4, [r4, #36]
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 247              		.loc 1 989 0
 248 0072 C4F84CA0 		str	r10, [r4, #76]
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 249              		.loc 1 990 0
 250 0076 84F850A0 		strb	r10, [r4, #80]
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 251              		.loc 1 1053 0
 252 007a 4A46     		mov	r2, r9
 253 007c 4146     		mov	r1, r8
 254 007e 3046     		mov	r0, r6
 255 0080 FFF7FEFF 		bl	pxPortInitialiseStack
 256              	.LVL27:
 257 0084 2060     		str	r0, [r4]
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 258              		.loc 1 1059 0
 259 0086 07B1     		cbz	r7, .L15
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 260              		.loc 1 1063 0
 261 0088 3C60     		str	r4, [r7]
 262              	.L15:
 263 008a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 264              		.cfi_endproc
 265              	.LFE7:
 267 008e 00BF     		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 268              		.align	2
 269              		.thumb
 270              		.thumb_func
 272              	prvInitialiseTaskLists:
 273              	.LFB37:
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 274              		.loc 1 3547 0
 275              		.cfi_startproc
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 78


 276              		@ args = 0, pretend = 0, frame = 0
 277              		@ frame_needed = 0, uses_anonymous_args = 0
 278 0000 38B5     		push	{r3, r4, r5, lr}
 279              	.LCFI1:
 280              		.cfi_def_cfa_offset 16
 281              		.cfi_offset 3, -16
 282              		.cfi_offset 4, -12
 283              		.cfi_offset 5, -8
 284              		.cfi_offset 14, -4
 285              	.LVL28:
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 286              		.loc 1 3550 0
 287 0002 0024     		movs	r4, #0
 288 0004 07E0     		b	.L28
 289              	.LVL29:
 290              	.L29:
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 291              		.loc 1 3552 0 discriminator 3
 292 0006 04EB8402 		add	r2, r4, r4, lsl #2
 293 000a 9300     		lsls	r3, r2, #2
 294 000c 0E48     		ldr	r0, .L31
 295 000e 1844     		add	r0, r0, r3
 296 0010 FFF7FEFF 		bl	vListInitialise
 297              	.LVL30:
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 298              		.loc 1 3550 0 discriminator 3
 299 0014 0134     		adds	r4, r4, #1
 300              	.LVL31:
 301              	.L28:
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 302              		.loc 1 3550 0 is_stmt 0 discriminator 1
 303 0016 062C     		cmp	r4, #6
 304 0018 F5D9     		bls	.L29
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 305              		.loc 1 3555 0 is_stmt 1
 306 001a 0C4D     		ldr	r5, .L31+4
 307 001c 2846     		mov	r0, r5
 308 001e FFF7FEFF 		bl	vListInitialise
 309              	.LVL32:
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 310              		.loc 1 3556 0
 311 0022 0B4C     		ldr	r4, .L31+8
 312              	.LVL33:
 313 0024 2046     		mov	r0, r4
 314 0026 FFF7FEFF 		bl	vListInitialise
 315              	.LVL34:
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 316              		.loc 1 3557 0
 317 002a 0A48     		ldr	r0, .L31+12
 318 002c FFF7FEFF 		bl	vListInitialise
 319              	.LVL35:
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 320              		.loc 1 3561 0
 321 0030 0948     		ldr	r0, .L31+16
 322 0032 FFF7FEFF 		bl	vListInitialise
 323              	.LVL36:
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 79


 324              		.loc 1 3567 0
 325 0036 0948     		ldr	r0, .L31+20
 326 0038 FFF7FEFF 		bl	vListInitialise
 327              	.LVL37:
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 328              		.loc 1 3573 0
 329 003c 084B     		ldr	r3, .L31+24
 330 003e 1D60     		str	r5, [r3]
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 331              		.loc 1 3574 0
 332 0040 084B     		ldr	r3, .L31+28
 333 0042 1C60     		str	r4, [r3]
 334 0044 38BD     		pop	{r3, r4, r5, pc}
 335              	.L32:
 336 0046 00BF     		.align	2
 337              	.L31:
 338 0048 00000000 		.word	.LANCHOR4
 339 004c 00000000 		.word	.LANCHOR5
 340 0050 00000000 		.word	.LANCHOR6
 341 0054 00000000 		.word	.LANCHOR1
 342 0058 00000000 		.word	.LANCHOR7
 343 005c 00000000 		.word	.LANCHOR0
 344 0060 00000000 		.word	.LANCHOR2
 345 0064 00000000 		.word	.LANCHOR8
 346              		.cfi_endproc
 347              	.LFE37:
 349              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 350              		.align	2
 351              		.thumb
 352              		.thumb_func
 354              	prvAddNewTaskToReadyList:
 355              	.LFB8:
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 356              		.loc 1 1073 0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 0
 359              		@ frame_needed = 0, uses_anonymous_args = 0
 360              	.LVL38:
 361 0000 10B5     		push	{r4, lr}
 362              	.LCFI2:
 363              		.cfi_def_cfa_offset 8
 364              		.cfi_offset 4, -8
 365              		.cfi_offset 14, -4
 366 0002 0446     		mov	r4, r0
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 367              		.loc 1 1076 0
 368 0004 FFF7FEFF 		bl	vPortEnterCritical
 369              	.LVL39:
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 370              		.loc 1 1078 0
 371 0008 204A     		ldr	r2, .L38
 372 000a 1368     		ldr	r3, [r2]
 373 000c 0133     		adds	r3, r3, #1
 374 000e 1360     		str	r3, [r2]
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 375              		.loc 1 1079 0
 376 0010 1F4B     		ldr	r3, .L38+4
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 80


 377 0012 1B68     		ldr	r3, [r3]
 378 0014 3BB9     		cbnz	r3, .L34
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 379              		.loc 1 1083 0
 380 0016 1E4B     		ldr	r3, .L38+4
 381 0018 1C60     		str	r4, [r3]
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 382              		.loc 1 1085 0
 383 001a 1368     		ldr	r3, [r2]
 384 001c 012B     		cmp	r3, #1
 385 001e 0DD1     		bne	.L35
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 386              		.loc 1 1090 0
 387 0020 FFF7FEFF 		bl	prvInitialiseTaskLists
 388              	.LVL40:
 389 0024 0AE0     		b	.L35
 390              	.L34:
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 391              		.loc 1 1102 0
 392 0026 1B4B     		ldr	r3, .L38+8
 393 0028 1B68     		ldr	r3, [r3]
 394 002a 3BB9     		cbnz	r3, .L35
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 395              		.loc 1 1104 0
 396 002c 184B     		ldr	r3, .L38+4
 397 002e 1B68     		ldr	r3, [r3]
 398 0030 DA6A     		ldr	r2, [r3, #44]
 399 0032 E36A     		ldr	r3, [r4, #44]
 400 0034 9A42     		cmp	r2, r3
 401 0036 01D8     		bhi	.L35
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 402              		.loc 1 1106 0
 403 0038 154B     		ldr	r3, .L38+4
 404 003a 1C60     		str	r4, [r3]
 405              	.L35:
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 406              		.loc 1 1119 0
 407 003c 164A     		ldr	r2, .L38+12
 408 003e 1368     		ldr	r3, [r2]
 409 0040 0133     		adds	r3, r3, #1
 410 0042 1360     		str	r3, [r2]
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 411              		.loc 1 1129 0
 412 0044 E36A     		ldr	r3, [r4, #44]
 413 0046 0122     		movs	r2, #1
 414 0048 02FA03F1 		lsl	r1, r2, r3
 415 004c 1348     		ldr	r0, .L38+16
 416 004e 0268     		ldr	r2, [r0]
 417 0050 0A43     		orrs	r2, r2, r1
 418 0052 0260     		str	r2, [r0]
 419 0054 03EB8303 		add	r3, r3, r3, lsl #2
 420 0058 9A00     		lsls	r2, r3, #2
 421 005a 211D     		adds	r1, r4, #4
 422 005c 1048     		ldr	r0, .L38+20
 423 005e 1044     		add	r0, r0, r2
 424 0060 FFF7FEFF 		bl	vListInsertEnd
 425              	.LVL41:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 81


1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426              		.loc 1 1133 0
 427 0064 FFF7FEFF 		bl	vPortExitCritical
 428              	.LVL42:
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 429              		.loc 1 1135 0
 430 0068 0A4B     		ldr	r3, .L38+8
 431 006a 1B68     		ldr	r3, [r3]
 432 006c 6BB1     		cbz	r3, .L33
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 433              		.loc 1 1139 0
 434 006e 084B     		ldr	r3, .L38+4
 435 0070 1B68     		ldr	r3, [r3]
 436 0072 DA6A     		ldr	r2, [r3, #44]
 437 0074 E36A     		ldr	r3, [r4, #44]
 438 0076 9A42     		cmp	r2, r3
 439 0078 07D2     		bcs	.L33
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 440              		.loc 1 1141 0
 441 007a 4FF08052 		mov	r2, #268435456
 442 007e 094B     		ldr	r3, .L38+24
 443 0080 1A60     		str	r2, [r3]
 444              		.syntax unified
 445              	@ 1141 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 446 0082 BFF34F8F 		dsb
 447              	@ 0 "" 2
 448              	@ 1141 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 449 0086 BFF36F8F 		isb
 450              	@ 0 "" 2
 451              		.thumb
 452              		.syntax unified
 453              	.L33:
 454 008a 10BD     		pop	{r4, pc}
 455              	.LVL43:
 456              	.L39:
 457              		.align	2
 458              	.L38:
 459 008c 00000000 		.word	.LANCHOR9
 460 0090 00000000 		.word	.LANCHOR10
 461 0094 00000000 		.word	.LANCHOR11
 462 0098 00000000 		.word	.LANCHOR12
 463 009c 00000000 		.word	.LANCHOR13
 464 00a0 00000000 		.word	.LANCHOR4
 465 00a4 04ED00E0 		.word	-536810236
 466              		.cfi_endproc
 467              	.LFE8:
 469              		.section	.text.prvDeleteTCB,"ax",%progbits
 470              		.align	2
 471              		.thumb
 472              		.thumb_func
 474              	prvDeleteTCB:
 475              	.LFB39:
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 476              		.loc 1 3827 0
 477              		.cfi_startproc
 478              		@ args = 0, pretend = 0, frame = 0
 479              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 82


 480              	.LVL44:
 481 0000 10B5     		push	{r4, lr}
 482              	.LCFI3:
 483              		.cfi_def_cfa_offset 8
 484              		.cfi_offset 4, -8
 485              		.cfi_offset 14, -4
 486 0002 0446     		mov	r4, r0
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 487              		.loc 1 3853 0
 488 0004 90F85130 		ldrb	r3, [r0, #81]	@ zero_extendqisi2
 489 0008 33B9     		cbnz	r3, .L41
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 490              		.loc 1 3857 0
 491 000a 006B     		ldr	r0, [r0, #48]
 492              	.LVL45:
 493 000c FFF7FEFF 		bl	vPortFree
 494              	.LVL46:
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 495              		.loc 1 3858 0
 496 0010 2046     		mov	r0, r4
 497 0012 FFF7FEFF 		bl	vPortFree
 498              	.LVL47:
 499 0016 10BD     		pop	{r4, pc}
 500              	.LVL48:
 501              	.L41:
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 502              		.loc 1 3860 0
 503 0018 012B     		cmp	r3, #1
 504 001a 02D1     		bne	.L43
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 505              		.loc 1 3864 0
 506 001c FFF7FEFF 		bl	vPortFree
 507              	.LVL49:
 508 0020 10BD     		pop	{r4, pc}
 509              	.LVL50:
 510              	.L43:
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 511              		.loc 1 3870 0
 512 0022 022B     		cmp	r3, #2
 513 0024 08D0     		beq	.L40
 514              	.LBB110:
 515              	.LBB111:
 516              		.loc 2 195 0
 517              		.syntax unified
 518              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 519 0026 4FF05003 			mov r3, #80												
 520 002a 83F31188 		msr basepri, r3											
 521 002e BFF36F8F 		isb														
 522 0032 BFF34F8F 		dsb														
 523              	
 524              	@ 0 "" 2
 525              	.LVL51:
 526              		.thumb
 527              		.syntax unified
 528              	.L44:
 529 0036 FEE7     		b	.L44
 530              	.L40:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 83


 531 0038 10BD     		pop	{r4, pc}
 532              	.LBE111:
 533              	.LBE110:
 534              		.cfi_endproc
 535              	.LFE39:
 537 003a 00BF     		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 538              		.align	2
 539              		.thumb
 540              		.thumb_func
 542              	prvCheckTasksWaitingTermination:
 543              	.LFB38:
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 544              		.loc 1 3579 0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 0
 547              		@ frame_needed = 0, uses_anonymous_args = 0
 548 0000 10B5     		push	{r4, lr}
 549              	.LCFI4:
 550              		.cfi_def_cfa_offset 8
 551              		.cfi_offset 4, -8
 552              		.cfi_offset 14, -4
 553              	.LBB112:
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 554              		.loc 1 3589 0
 555 0002 14E0     		b	.L47
 556              	.L48:
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 557              		.loc 1 3591 0
 558 0004 FFF7FEFF 		bl	vPortEnterCritical
 559              	.LVL52:
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 560              		.loc 1 3593 0
 561 0008 0B4B     		ldr	r3, .L50
 562 000a DB68     		ldr	r3, [r3, #12]
 563 000c DC68     		ldr	r4, [r3, #12]
 564              	.LVL53:
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 565              		.loc 1 3594 0
 566 000e 201D     		adds	r0, r4, #4
 567 0010 FFF7FEFF 		bl	uxListRemove
 568              	.LVL54:
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 569              		.loc 1 3595 0
 570 0014 094A     		ldr	r2, .L50+4
 571 0016 1368     		ldr	r3, [r2]
 572 0018 013B     		subs	r3, r3, #1
 573 001a 1360     		str	r3, [r2]
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 574              		.loc 1 3596 0
 575 001c 084A     		ldr	r2, .L50+8
 576 001e 1368     		ldr	r3, [r2]
 577 0020 013B     		subs	r3, r3, #1
 578 0022 1360     		str	r3, [r2]
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 579              		.loc 1 3598 0
 580 0024 FFF7FEFF 		bl	vPortExitCritical
 581              	.LVL55:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 84


3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 582              		.loc 1 3600 0
 583 0028 2046     		mov	r0, r4
 584 002a FFF7FEFF 		bl	prvDeleteTCB
 585              	.LVL56:
 586              	.L47:
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 587              		.loc 1 3589 0
 588 002e 044B     		ldr	r3, .L50+8
 589 0030 1B68     		ldr	r3, [r3]
 590 0032 002B     		cmp	r3, #0
 591 0034 E6D1     		bne	.L48
 592              	.LBE112:
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 593              		.loc 1 3604 0
 594 0036 10BD     		pop	{r4, pc}
 595              	.L51:
 596              		.align	2
 597              	.L50:
 598 0038 00000000 		.word	.LANCHOR7
 599 003c 00000000 		.word	.LANCHOR9
 600 0040 00000000 		.word	.LANCHOR14
 601              		.cfi_endproc
 602              	.LFE38:
 604              		.section	.text.prvIdleTask,"ax",%progbits
 605              		.align	2
 606              		.thumb
 607              		.thumb_func
 609              	prvIdleTask:
 610              	.LFB36:
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 611              		.loc 1 3335 0
 612              		.cfi_startproc
 613              		@ Volatile: function does not return.
 614              		@ args = 0, pretend = 0, frame = 0
 615              		@ frame_needed = 0, uses_anonymous_args = 0
 616              	.LVL57:
 617 0000 08B5     		push	{r3, lr}
 618              	.LCFI5:
 619              		.cfi_def_cfa_offset 8
 620              		.cfi_offset 3, -8
 621              		.cfi_offset 14, -4
 622              	.LVL58:
 623              	.L53:
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 624              		.loc 1 3351 0
 625 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 626              	.LVL59:
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 627              		.loc 1 3374 0
 628 0006 064B     		ldr	r3, .L56
 629 0008 1B68     		ldr	r3, [r3]
 630 000a 012B     		cmp	r3, #1
 631 000c F9D9     		bls	.L53
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 632              		.loc 1 3376 0
 633 000e 4FF08052 		mov	r2, #268435456
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 85


 634 0012 044B     		ldr	r3, .L56+4
 635 0014 1A60     		str	r2, [r3]
 636              		.syntax unified
 637              	@ 3376 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 638 0016 BFF34F8F 		dsb
 639              	@ 0 "" 2
 640              	@ 3376 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 641 001a BFF36F8F 		isb
 642              	@ 0 "" 2
 643              		.thumb
 644              		.syntax unified
 645 001e F0E7     		b	.L53
 646              	.L57:
 647              		.align	2
 648              	.L56:
 649 0020 00000000 		.word	.LANCHOR4
 650 0024 04ED00E0 		.word	-536810236
 651              		.cfi_endproc
 652              	.LFE36:
 654              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 655              		.align	2
 656              		.thumb
 657              		.thumb_func
 659              	prvAddCurrentTaskToDelayedList:
 660              	.LFB54:
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 86


3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 87


3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 88


4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 89


4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 90


4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 91


4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 92


4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 93


4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 94


4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 95


4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 96


4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 97


4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 98


4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 99


4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 100


4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 101


4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 102


4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 103


4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 104


4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 105


5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 106


5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTaskGetIdleRunTimeCounter( void )
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 661              		.loc 1 5082 0
 662              		.cfi_startproc
 663              		@ args = 0, pretend = 0, frame = 0
 664              		@ frame_needed = 0, uses_anonymous_args = 0
 665              	.LVL60:
 666 0000 70B5     		push	{r4, r5, r6, lr}
 667              	.LCFI6:
 668              		.cfi_def_cfa_offset 16
 669              		.cfi_offset 4, -16
 670              		.cfi_offset 5, -12
 671              		.cfi_offset 6, -8
 672              		.cfi_offset 14, -4
 673 0002 0446     		mov	r4, r0
 674 0004 0E46     		mov	r6, r1
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 675              		.loc 1 5084 0
 676 0006 1F4B     		ldr	r3, .L64
 677 0008 1D68     		ldr	r5, [r3]
 678              	.LVL61:
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 679              		.loc 1 5097 0
 680 000a 1F4B     		ldr	r3, .L64+4
 681 000c 1868     		ldr	r0, [r3]
 682              	.LVL62:
 683 000e 0430     		adds	r0, r0, #4
 684 0010 FFF7FEFF 		bl	uxListRemove
 685              	.LVL63:
 686 0014 50B9     		cbnz	r0, .L59
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
 687              		.loc 1 5101 0
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 107


 688 0016 1C4B     		ldr	r3, .L64+4
 689 0018 1B68     		ldr	r3, [r3]
 690 001a DA6A     		ldr	r2, [r3, #44]
 691 001c 0123     		movs	r3, #1
 692 001e 03FA02F2 		lsl	r2, r3, r2
 693 0022 1A49     		ldr	r1, .L64+8
 694 0024 0B68     		ldr	r3, [r1]
 695 0026 23EA0203 		bic	r3, r3, r2
 696 002a 0B60     		str	r3, [r1]
 697              	.L59:
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 698              		.loc 1 5110 0
 699 002c B4F1FF3F 		cmp	r4, #-1
 700 0030 14BF     		ite	ne
 701 0032 0023     		movne	r3, #0
 702 0034 0123     		moveq	r3, #1
 703 0036 002E     		cmp	r6, #0
 704 0038 08BF     		it	eq
 705 003a 0023     		moveq	r3, #0
 706 003c 33B1     		cbz	r3, .L60
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 707              		.loc 1 5115 0
 708 003e 124B     		ldr	r3, .L64+4
 709 0040 1968     		ldr	r1, [r3]
 710 0042 0431     		adds	r1, r1, #4
 711 0044 1248     		ldr	r0, .L64+12
 712 0046 FFF7FEFF 		bl	vListInsertEnd
 713              	.LVL64:
 714 004a 70BD     		pop	{r4, r5, r6, pc}
 715              	.LVL65:
 716              	.L60:
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 717              		.loc 1 5122 0
 718 004c 2C44     		add	r4, r4, r5
 719              	.LVL66:
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 720              		.loc 1 5125 0
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 108


 721 004e 0E4B     		ldr	r3, .L64+4
 722 0050 1B68     		ldr	r3, [r3]
 723 0052 5C60     		str	r4, [r3, #4]
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 724              		.loc 1 5127 0
 725 0054 A542     		cmp	r5, r4
 726 0056 07D9     		bls	.L62
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 727              		.loc 1 5131 0
 728 0058 0E4B     		ldr	r3, .L64+16
 729 005a 1868     		ldr	r0, [r3]
 730 005c 0A4B     		ldr	r3, .L64+4
 731 005e 1968     		ldr	r1, [r3]
 732 0060 0431     		adds	r1, r1, #4
 733 0062 FFF7FEFF 		bl	vListInsert
 734              	.LVL67:
 735 0066 70BD     		pop	{r4, r5, r6, pc}
 736              	.LVL68:
 737              	.L62:
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 738              		.loc 1 5137 0
 739 0068 0B4B     		ldr	r3, .L64+20
 740 006a 1868     		ldr	r0, [r3]
 741 006c 064B     		ldr	r3, .L64+4
 742 006e 1968     		ldr	r1, [r3]
 743 0070 0431     		adds	r1, r1, #4
 744 0072 FFF7FEFF 		bl	vListInsert
 745              	.LVL69:
5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 746              		.loc 1 5142 0
 747 0076 094B     		ldr	r3, .L64+24
 748 0078 1B68     		ldr	r3, [r3]
 749 007a 9C42     		cmp	r4, r3
 750 007c 01D2     		bcs	.L58
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 751              		.loc 1 5144 0
 752 007e 074B     		ldr	r3, .L64+24
 753 0080 1C60     		str	r4, [r3]
 754              	.L58:
 755 0082 70BD     		pop	{r4, r5, r6, pc}
 756              	.LVL70:
 757              	.L65:
 758              		.align	2
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 109


 759              	.L64:
 760 0084 00000000 		.word	.LANCHOR15
 761 0088 00000000 		.word	.LANCHOR10
 762 008c 00000000 		.word	.LANCHOR13
 763 0090 00000000 		.word	.LANCHOR0
 764 0094 00000000 		.word	.LANCHOR8
 765 0098 00000000 		.word	.LANCHOR2
 766 009c 00000000 		.word	.LANCHOR3
 767              		.cfi_endproc
 768              	.LFE54:
 770              		.section	.text.xTaskCreateStatic,"ax",%progbits
 771              		.align	2
 772              		.global	xTaskCreateStatic
 773              		.thumb
 774              		.thumb_func
 776              	xTaskCreateStatic:
 777              	.LFB5:
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 778              		.loc 1 585 0
 779              		.cfi_startproc
 780              		@ args = 12, pretend = 0, frame = 8
 781              		@ frame_needed = 0, uses_anonymous_args = 0
 782              	.LVL71:
 783 0000 70B5     		push	{r4, r5, r6, lr}
 784              	.LCFI7:
 785              		.cfi_def_cfa_offset 16
 786              		.cfi_offset 4, -16
 787              		.cfi_offset 5, -12
 788              		.cfi_offset 6, -8
 789              		.cfi_offset 14, -4
 790 0002 86B0     		sub	sp, sp, #24
 791              	.LCFI8:
 792              		.cfi_def_cfa_offset 40
 793 0004 0B9D     		ldr	r5, [sp, #44]
 794 0006 0C9C     		ldr	r4, [sp, #48]
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 795              		.loc 1 589 0
 796 0008 45B9     		cbnz	r5, .L67
 797              	.LBB113:
 798              	.LBB114:
 799              		.loc 2 195 0
 800              		.syntax unified
 801              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 802 000a 4FF05003 			mov r3, #80												
 803 000e 83F31188 		msr basepri, r3											
 804 0012 BFF36F8F 		isb														
 805 0016 BFF34F8F 		dsb														
 806              	
 807              	@ 0 "" 2
 808              	.LVL72:
 809              		.thumb
 810              		.syntax unified
 811              	.L68:
 812 001a FEE7     		b	.L68
 813              	.LVL73:
 814              	.L67:
 815              	.LBE114:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 110


 816              	.LBE113:
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817              		.loc 1 590 0
 818 001c 44B9     		cbnz	r4, .L69
 819              	.LBB115:
 820              	.LBB116:
 821              		.loc 2 195 0
 822              		.syntax unified
 823              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 824 001e 4FF05003 			mov r3, #80												
 825 0022 83F31188 		msr basepri, r3											
 826 0026 BFF36F8F 		isb														
 827 002a BFF34F8F 		dsb														
 828              	
 829              	@ 0 "" 2
 830              	.LVL74:
 831              		.thumb
 832              		.syntax unified
 833              	.L70:
 834 002e FEE7     		b	.L70
 835              	.LVL75:
 836              	.L69:
 837              	.LBE116:
 838              	.LBE115:
 839              	.LBB117:
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 840              		.loc 1 597 0
 841 0030 5426     		movs	r6, #84
 842 0032 0496     		str	r6, [sp, #16]
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 843              		.loc 1 598 0
 844 0034 049E     		ldr	r6, [sp, #16]
 845 0036 542E     		cmp	r6, #84
 846 0038 08D0     		beq	.L71
 847              	.LBB118:
 848              	.LBB119:
 849              		.loc 2 195 0
 850              		.syntax unified
 851              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 852 003a 4FF05003 			mov r3, #80												
 853 003e 83F31188 		msr basepri, r3											
 854 0042 BFF36F8F 		isb														
 855 0046 BFF34F8F 		dsb														
 856              	
 857              	@ 0 "" 2
 858              	.LVL76:
 859              		.thumb
 860              		.syntax unified
 861              	.L72:
 862 004a FEE7     		b	.L72
 863              	.LVL77:
 864              	.L71:
 865              	.LBE119:
 866              	.LBE118:
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 867              		.loc 1 599 0
 868 004c 049E     		ldr	r6, [sp, #16]
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 111


 869              	.LBE117:
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 870              		.loc 1 604 0
 871 004e 002C     		cmp	r4, #0
 872 0050 18BF     		it	ne
 873 0052 002D     		cmpne	r5, #0
 874 0054 10D0     		beq	.L73
 875              	.LVL78:
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 876              		.loc 1 609 0
 877 0056 2563     		str	r5, [r4, #48]
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 878              		.loc 1 615 0
 879 0058 0225     		movs	r5, #2
 880 005a 84F85150 		strb	r5, [r4, #81]
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 881              		.loc 1 619 0
 882 005e 0025     		movs	r5, #0
 883 0060 0395     		str	r5, [sp, #12]
 884 0062 0294     		str	r4, [sp, #8]
 885 0064 05AD     		add	r5, sp, #20
 886 0066 0195     		str	r5, [sp, #4]
 887 0068 0A9D     		ldr	r5, [sp, #40]
 888 006a 0095     		str	r5, [sp]
 889 006c FFF7FEFF 		bl	prvInitialiseNewTask
 890              	.LVL79:
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 891              		.loc 1 620 0
 892 0070 2046     		mov	r0, r4
 893 0072 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 894              	.LVL80:
 895 0076 01E0     		b	.L74
 896              	.LVL81:
 897              	.L73:
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 898              		.loc 1 624 0
 899 0078 0023     		movs	r3, #0
 900              	.LVL82:
 901 007a 0593     		str	r3, [sp, #20]
 902              	.LVL83:
 903              	.L74:
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 904              		.loc 1 628 0
 905 007c 0598     		ldr	r0, [sp, #20]
 906 007e 06B0     		add	sp, sp, #24
 907              	.LCFI9:
 908              		.cfi_def_cfa_offset 16
 909              		@ sp needed
 910 0080 70BD     		pop	{r4, r5, r6, pc}
 911              		.cfi_endproc
 912              	.LFE5:
 914              		.section	.text.xTaskCreate,"ax",%progbits
 915              		.align	2
 916              		.global	xTaskCreate
 917              		.thumb
 918              		.thumb_func
 920              	xTaskCreate:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 112


 921              	.LFB6:
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 922              		.loc 1 736 0
 923              		.cfi_startproc
 924              		@ args = 8, pretend = 0, frame = 0
 925              		@ frame_needed = 0, uses_anonymous_args = 0
 926              	.LVL84:
 927 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 928              	.LCFI10:
 929              		.cfi_def_cfa_offset 28
 930              		.cfi_offset 4, -28
 931              		.cfi_offset 5, -24
 932              		.cfi_offset 6, -20
 933              		.cfi_offset 7, -16
 934              		.cfi_offset 8, -12
 935              		.cfi_offset 9, -8
 936              		.cfi_offset 14, -4
 937 0004 85B0     		sub	sp, sp, #20
 938              	.LCFI11:
 939              		.cfi_def_cfa_offset 48
 940 0006 0646     		mov	r6, r0
 941 0008 0F46     		mov	r7, r1
 942 000a 1546     		mov	r5, r2
 943 000c 9846     		mov	r8, r3
 944              	.LBB120:
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 945              		.loc 1 770 0
 946 000e 9000     		lsls	r0, r2, #2
 947              	.LVL85:
 948 0010 FFF7FEFF 		bl	pvPortMalloc
 949              	.LVL86:
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 950              		.loc 1 772 0
 951 0014 60B1     		cbz	r0, .L80
 952 0016 8146     		mov	r9, r0
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 953              		.loc 1 775 0
 954 0018 5420     		movs	r0, #84
 955              	.LVL87:
 956 001a FFF7FEFF 		bl	pvPortMalloc
 957              	.LVL88:
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 958              		.loc 1 777 0
 959 001e 0446     		mov	r4, r0
 960 0020 10B1     		cbz	r0, .L78
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 961              		.loc 1 780 0
 962 0022 C0F83090 		str	r9, [r0, #48]
 963 0026 04E0     		b	.L77
 964              	.L78:
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 965              		.loc 1 786 0
 966 0028 4846     		mov	r0, r9
 967              	.LVL89:
 968 002a FFF7FEFF 		bl	vPortFree
 969              	.LVL90:
 970 002e 00E0     		b	.L77
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 113


 971              	.LVL91:
 972              	.L80:
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 973              		.loc 1 791 0
 974 0030 0024     		movs	r4, #0
 975              	.LVL92:
 976              	.L77:
 977              	.LBE120:
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 978              		.loc 1 796 0
 979 0032 9CB1     		cbz	r4, .L81
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 980              		.loc 1 802 0
 981 0034 0023     		movs	r3, #0
 982 0036 84F85130 		strb	r3, [r4, #81]
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 983              		.loc 1 806 0
 984 003a 0393     		str	r3, [sp, #12]
 985 003c 0294     		str	r4, [sp, #8]
 986 003e 0D9B     		ldr	r3, [sp, #52]
 987 0040 0193     		str	r3, [sp, #4]
 988 0042 0C9B     		ldr	r3, [sp, #48]
 989 0044 0093     		str	r3, [sp]
 990 0046 4346     		mov	r3, r8
 991 0048 2A46     		mov	r2, r5
 992 004a 3946     		mov	r1, r7
 993 004c 3046     		mov	r0, r6
 994 004e FFF7FEFF 		bl	prvInitialiseNewTask
 995              	.LVL93:
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 996              		.loc 1 807 0
 997 0052 2046     		mov	r0, r4
 998 0054 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 999              	.LVL94:
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1000              		.loc 1 808 0
 1001 0058 0120     		movs	r0, #1
 1002 005a 01E0     		b	.L79
 1003              	.LVL95:
 1004              	.L81:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1005              		.loc 1 812 0
 1006 005c 4FF0FF30 		mov	r0, #-1
 1007              	.L79:
 1008              	.LVL96:
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1009              		.loc 1 816 0
 1010 0060 05B0     		add	sp, sp, #20
 1011              	.LCFI12:
 1012              		.cfi_def_cfa_offset 28
 1013              		@ sp needed
 1014 0062 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1015              		.cfi_endproc
 1016              	.LFE6:
 1018 0066 00BF     		.section	.text.vTaskDelete,"ax",%progbits
 1019              		.align	2
 1020              		.global	vTaskDelete
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 114


 1021              		.thumb
 1022              		.thumb_func
 1024              	vTaskDelete:
 1025              	.LFB9:
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1026              		.loc 1 1158 0
 1027              		.cfi_startproc
 1028              		@ args = 0, pretend = 0, frame = 0
 1029              		@ frame_needed = 0, uses_anonymous_args = 0
 1030              	.LVL97:
 1031 0000 38B5     		push	{r3, r4, r5, lr}
 1032              	.LCFI13:
 1033              		.cfi_def_cfa_offset 16
 1034              		.cfi_offset 3, -16
 1035              		.cfi_offset 4, -12
 1036              		.cfi_offset 5, -8
 1037              		.cfi_offset 14, -4
 1038 0002 0446     		mov	r4, r0
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1039              		.loc 1 1161 0
 1040 0004 FFF7FEFF 		bl	vPortEnterCritical
 1041              	.LVL98:
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1042              		.loc 1 1165 0
 1043 0008 0CB9     		cbnz	r4, .L84
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1044              		.loc 1 1165 0 is_stmt 0 discriminator 1
 1045 000a 2A4B     		ldr	r3, .L93
 1046 000c 1C68     		ldr	r4, [r3]
 1047              	.LVL99:
 1048              	.L84:
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1049              		.loc 1 1168 0 is_stmt 1 discriminator 4
 1050 000e 251D     		adds	r5, r4, #4
 1051 0010 2846     		mov	r0, r5
 1052 0012 FFF7FEFF 		bl	uxListRemove
 1053              	.LVL100:
 1054 0016 70B9     		cbnz	r0, .L85
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1055              		.loc 1 1170 0
 1056 0018 E26A     		ldr	r2, [r4, #44]
 1057 001a 02EB8201 		add	r1, r2, r2, lsl #2
 1058 001e 8B00     		lsls	r3, r1, #2
 1059 0020 2549     		ldr	r1, .L93+4
 1060 0022 CB58     		ldr	r3, [r1, r3]
 1061 0024 3BB9     		cbnz	r3, .L85
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1062              		.loc 1 1170 0 is_stmt 0 discriminator 1
 1063 0026 0123     		movs	r3, #1
 1064 0028 03FA02F2 		lsl	r2, r3, r2
 1065 002c 2349     		ldr	r1, .L93+8
 1066 002e 0B68     		ldr	r3, [r1]
 1067 0030 23EA0203 		bic	r3, r3, r2
 1068 0034 0B60     		str	r3, [r1]
 1069              	.L85:
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1070              		.loc 1 1178 0 is_stmt 1
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 115


 1071 0036 A36A     		ldr	r3, [r4, #40]
 1072 0038 1BB1     		cbz	r3, .L86
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1073              		.loc 1 1180 0
 1074 003a 04F11800 		add	r0, r4, #24
 1075 003e FFF7FEFF 		bl	uxListRemove
 1076              	.LVL101:
 1077              	.L86:
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1078              		.loc 1 1191 0
 1079 0042 1F4A     		ldr	r2, .L93+12
 1080 0044 1368     		ldr	r3, [r2]
 1081 0046 0133     		adds	r3, r3, #1
 1082 0048 1360     		str	r3, [r2]
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1083              		.loc 1 1193 0
 1084 004a 1A4B     		ldr	r3, .L93
 1085 004c 1B68     		ldr	r3, [r3]
 1086 004e 9C42     		cmp	r4, r3
 1087 0050 08D1     		bne	.L87
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1088              		.loc 1 1200 0
 1089 0052 2946     		mov	r1, r5
 1090 0054 1B48     		ldr	r0, .L93+16
 1091 0056 FFF7FEFF 		bl	vListInsertEnd
 1092              	.LVL102:
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1093              		.loc 1 1205 0
 1094 005a 1B4A     		ldr	r2, .L93+20
 1095 005c 1368     		ldr	r3, [r2]
 1096 005e 0133     		adds	r3, r3, #1
 1097 0060 1360     		str	r3, [r2]
 1098 0062 08E0     		b	.L88
 1099              	.L87:
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 1100              		.loc 1 1216 0
 1101 0064 194A     		ldr	r2, .L93+24
 1102 0066 1368     		ldr	r3, [r2]
 1103 0068 013B     		subs	r3, r3, #1
 1104 006a 1360     		str	r3, [r2]
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1105              		.loc 1 1217 0
 1106 006c 2046     		mov	r0, r4
 1107 006e FFF7FEFF 		bl	prvDeleteTCB
 1108              	.LVL103:
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1109              		.loc 1 1221 0
 1110 0072 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1111              	.LVL104:
 1112              	.L88:
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1113              		.loc 1 1226 0
 1114 0076 FFF7FEFF 		bl	vPortExitCritical
 1115              	.LVL105:
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1116              		.loc 1 1230 0
 1117 007a 154B     		ldr	r3, .L93+28
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 116


 1118 007c 1B68     		ldr	r3, [r3]
 1119 007e BBB1     		cbz	r3, .L83
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1120              		.loc 1 1232 0
 1121 0080 0C4B     		ldr	r3, .L93
 1122 0082 1B68     		ldr	r3, [r3]
 1123 0084 9C42     		cmp	r4, r3
 1124 0086 13D1     		bne	.L83
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1125              		.loc 1 1234 0
 1126 0088 124B     		ldr	r3, .L93+32
 1127 008a 1B68     		ldr	r3, [r3]
 1128 008c 43B1     		cbz	r3, .L90
 1129              	.LBB121:
 1130              	.LBB122:
 1131              		.loc 2 195 0
 1132              		.syntax unified
 1133              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1134 008e 4FF05003 			mov r3, #80												
 1135 0092 83F31188 		msr basepri, r3											
 1136 0096 BFF36F8F 		isb														
 1137 009a BFF34F8F 		dsb														
 1138              	
 1139              	@ 0 "" 2
 1140              	.LVL106:
 1141              		.thumb
 1142              		.syntax unified
 1143              	.L91:
 1144 009e FEE7     		b	.L91
 1145              	.L90:
 1146              	.LBE122:
 1147              	.LBE121:
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1148              		.loc 1 1235 0
 1149 00a0 4FF08052 		mov	r2, #268435456
 1150 00a4 0C4B     		ldr	r3, .L93+36
 1151 00a6 1A60     		str	r2, [r3]
 1152              		.syntax unified
 1153              	@ 1235 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1154 00a8 BFF34F8F 		dsb
 1155              	@ 0 "" 2
 1156              	@ 1235 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1157 00ac BFF36F8F 		isb
 1158              	@ 0 "" 2
 1159              		.thumb
 1160              		.syntax unified
 1161              	.L83:
 1162 00b0 38BD     		pop	{r3, r4, r5, pc}
 1163              	.LVL107:
 1164              	.L94:
 1165 00b2 00BF     		.align	2
 1166              	.L93:
 1167 00b4 00000000 		.word	.LANCHOR10
 1168 00b8 00000000 		.word	.LANCHOR4
 1169 00bc 00000000 		.word	.LANCHOR13
 1170 00c0 00000000 		.word	.LANCHOR12
 1171 00c4 00000000 		.word	.LANCHOR7
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 117


 1172 00c8 00000000 		.word	.LANCHOR14
 1173 00cc 00000000 		.word	.LANCHOR9
 1174 00d0 00000000 		.word	.LANCHOR11
 1175 00d4 00000000 		.word	.LANCHOR16
 1176 00d8 04ED00E0 		.word	-536810236
 1177              		.cfi_endproc
 1178              	.LFE9:
 1180              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1181              		.align	2
 1182              		.global	uxTaskPriorityGet
 1183              		.thumb
 1184              		.thumb_func
 1186              	uxTaskPriorityGet:
 1187              	.LFB11:
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1188              		.loc 1 1471 0
 1189              		.cfi_startproc
 1190              		@ args = 0, pretend = 0, frame = 0
 1191              		@ frame_needed = 0, uses_anonymous_args = 0
 1192              	.LVL108:
 1193 0000 10B5     		push	{r4, lr}
 1194              	.LCFI14:
 1195              		.cfi_def_cfa_offset 8
 1196              		.cfi_offset 4, -8
 1197              		.cfi_offset 14, -4
 1198 0002 0446     		mov	r4, r0
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1199              		.loc 1 1475 0
 1200 0004 FFF7FEFF 		bl	vPortEnterCritical
 1201              	.LVL109:
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1202              		.loc 1 1479 0
 1203 0008 0CB9     		cbnz	r4, .L96
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1204              		.loc 1 1479 0 is_stmt 0 discriminator 1
 1205 000a 034B     		ldr	r3, .L99
 1206 000c 1C68     		ldr	r4, [r3]
 1207              	.LVL110:
 1208              	.L96:
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1209              		.loc 1 1480 0 is_stmt 1 discriminator 4
 1210 000e E46A     		ldr	r4, [r4, #44]
 1211              	.LVL111:
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1212              		.loc 1 1482 0 discriminator 4
 1213 0010 FFF7FEFF 		bl	vPortExitCritical
 1214              	.LVL112:
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1215              		.loc 1 1485 0 discriminator 4
 1216 0014 2046     		mov	r0, r4
 1217 0016 10BD     		pop	{r4, pc}
 1218              	.LVL113:
 1219              	.L100:
 1220              		.align	2
 1221              	.L99:
 1222 0018 00000000 		.word	.LANCHOR10
 1223              		.cfi_endproc
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 118


 1224              	.LFE11:
 1226              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1227              		.align	2
 1228              		.global	uxTaskPriorityGetFromISR
 1229              		.thumb
 1230              		.thumb_func
 1232              	uxTaskPriorityGetFromISR:
 1233              	.LFB12:
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
 1234              		.loc 1 1493 0
 1235              		.cfi_startproc
 1236              		@ args = 0, pretend = 0, frame = 0
 1237              		@ frame_needed = 0, uses_anonymous_args = 0
 1238              	.LVL114:
 1239 0000 10B5     		push	{r4, lr}
 1240              	.LCFI15:
 1241              		.cfi_def_cfa_offset 8
 1242              		.cfi_offset 4, -8
 1243              		.cfi_offset 14, -4
 1244 0002 0446     		mov	r4, r0
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1245              		.loc 1 1513 0
 1246 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1247              	.LVL115:
 1248              	.LBB123:
 1249              	.LBB124:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1250              		.loc 2 211 0
 1251              		.syntax unified
 1252              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1253 0008 EFF31183 			mrs r3, basepri											
 1254 000c 4FF05002 		mov r2, #80												
 1255 0010 82F31188 		msr basepri, r2											
 1256 0014 BFF36F8F 		isb														
 1257 0018 BFF34F8F 		dsb														
 1258              	
 1259              	@ 0 "" 2
 1260              		.thumb
 1261              		.syntax unified
 1262              	.LBE124:
 1263              	.LBE123:
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 119


 1264              		.loc 1 1519 0
 1265 001c 0CB9     		cbnz	r4, .L102
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1266              		.loc 1 1519 0 is_stmt 0 discriminator 1
 1267 001e 034A     		ldr	r2, .L105
 1268 0020 1468     		ldr	r4, [r2]
 1269              	.LVL116:
 1270              	.L102:
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1271              		.loc 1 1520 0 is_stmt 1 discriminator 4
 1272 0022 E06A     		ldr	r0, [r4, #44]
 1273              	.LVL117:
 1274              	.LBB125:
 1275              	.LBB126:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1276              		.loc 2 229 0 discriminator 4
 1277              		.syntax unified
 1278              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1279 0024 83F31188 			msr basepri, r3	
 1280              	@ 0 "" 2
 1281              	.LVL118:
 1282              		.thumb
 1283              		.syntax unified
 1284              	.LBE126:
 1285              	.LBE125:
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1286              		.loc 1 1525 0 discriminator 4
 1287 0028 10BD     		pop	{r4, pc}
 1288              	.LVL119:
 1289              	.L106:
 1290 002a 00BF     		.align	2
 1291              	.L105:
 1292 002c 00000000 		.word	.LANCHOR10
 1293              		.cfi_endproc
 1294              	.LFE12:
 1296              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1297              		.align	2
 1298              		.global	vTaskPrioritySet
 1299              		.thumb
 1300              		.thumb_func
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 120


 1302              	vTaskPrioritySet:
 1303              	.LFB13:
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1304              		.loc 1 1533 0
 1305              		.cfi_startproc
 1306              		@ args = 0, pretend = 0, frame = 0
 1307              		@ frame_needed = 0, uses_anonymous_args = 0
 1308              	.LVL120:
 1309 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1310              	.LCFI16:
 1311              		.cfi_def_cfa_offset 24
 1312              		.cfi_offset 3, -24
 1313              		.cfi_offset 4, -20
 1314              		.cfi_offset 5, -16
 1315              		.cfi_offset 6, -12
 1316              		.cfi_offset 7, -8
 1317              		.cfi_offset 14, -4
 1318              	.LVL121:
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1319              		.loc 1 1538 0
 1320 0002 0629     		cmp	r1, #6
 1321 0004 08D9     		bls	.L108
 1322              	.LBB127:
 1323              	.LBB128:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1324              		.loc 2 195 0
 1325              		.syntax unified
 1326              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1327 0006 4FF05003 			mov r3, #80												
 1328 000a 83F31188 		msr basepri, r3											
 1329 000e BFF36F8F 		isb														
 1330 0012 BFF34F8F 		dsb														
 1331              	
 1332              	@ 0 "" 2
 1333              	.LVL122:
 1334              		.thumb
 1335              		.syntax unified
 1336              	.L109:
 1337 0016 FEE7     		b	.L109
 1338              	.L108:
 1339 0018 0446     		mov	r4, r0
 1340 001a 0D46     		mov	r5, r1
 1341              	.LBE128:
 1342              	.LBE127:
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1343              		.loc 1 1541 0
 1344 001c 0629     		cmp	r1, #6
 1345 001e 00D9     		bls	.L110
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1346              		.loc 1 1543 0
 1347 0020 0625     		movs	r5, #6
 1348              	.L110:
 1349              	.LVL123:
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1350              		.loc 1 1550 0
 1351 0022 FFF7FEFF 		bl	vPortEnterCritical
 1352              	.LVL124:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 121


1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1353              		.loc 1 1554 0
 1354 0026 0CB9     		cbnz	r4, .L111
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1355              		.loc 1 1554 0 is_stmt 0 discriminator 1
 1356 0028 2B4B     		ldr	r3, .L124
 1357 002a 1C68     		ldr	r4, [r3]
 1358              	.LVL125:
 1359              	.L111:
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1360              		.loc 1 1560 0 is_stmt 1 discriminator 4
 1361 002c 636C     		ldr	r3, [r4, #68]
 1362              	.LVL126:
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1363              		.loc 1 1568 0 discriminator 4
 1364 002e 9D42     		cmp	r5, r3
 1365 0030 4FD0     		beq	.L112
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1366              		.loc 1 1572 0
 1367 0032 0AD9     		bls	.L113
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1368              		.loc 1 1574 0
 1369 0034 284A     		ldr	r2, .L124
 1370 0036 1268     		ldr	r2, [r2]
 1371 0038 9442     		cmp	r4, r2
 1372 003a 0CD0     		beq	.L120
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1373              		.loc 1 1579 0
 1374 003c 264A     		ldr	r2, .L124
 1375 003e 1268     		ldr	r2, [r2]
 1376 0040 D26A     		ldr	r2, [r2, #44]
 1377 0042 9542     		cmp	r5, r2
 1378 0044 09D2     		bcs	.L121
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1379              		.loc 1 1536 0
 1380 0046 0026     		movs	r6, #0
 1381 0048 0AE0     		b	.L114
 1382              	.L113:
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1383              		.loc 1 1595 0
 1384 004a 234A     		ldr	r2, .L124
 1385 004c 1268     		ldr	r2, [r2]
 1386 004e 9442     		cmp	r4, r2
 1387 0050 05D0     		beq	.L122
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1388              		.loc 1 1536 0
 1389 0052 0026     		movs	r6, #0
 1390 0054 04E0     		b	.L114
 1391              	.L120:
 1392 0056 0026     		movs	r6, #0
 1393 0058 02E0     		b	.L114
 1394              	.L121:
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1395              		.loc 1 1581 0
 1396 005a 0126     		movs	r6, #1
 1397 005c 00E0     		b	.L114
 1398              	.L122:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 122


1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1399              		.loc 1 1600 0
 1400 005e 0126     		movs	r6, #1
 1401              	.L114:
 1402              	.LVL127:
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1403              		.loc 1 1612 0
 1404 0060 E76A     		ldr	r7, [r4, #44]
 1405              	.LVL128:
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1406              		.loc 1 1618 0
 1407 0062 BB42     		cmp	r3, r7
 1408 0064 00D1     		bne	.L115
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1409              		.loc 1 1620 0
 1410 0066 E562     		str	r5, [r4, #44]
 1411              	.L115:
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1412              		.loc 1 1628 0
 1413 0068 6564     		str	r5, [r4, #68]
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1414              		.loc 1 1638 0
 1415 006a A369     		ldr	r3, [r4, #24]
 1416              	.LVL129:
 1417 006c 002B     		cmp	r3, #0
 1418 006e 02DB     		blt	.L116
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1419              		.loc 1 1640 0
 1420 0070 C5F10705 		rsb	r5, r5, #7
 1421              	.LVL130:
 1422 0074 A561     		str	r5, [r4, #24]
 1423              	.L116:
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1424              		.loc 1 1651 0
 1425 0076 6169     		ldr	r1, [r4, #20]
 1426 0078 07EB8702 		add	r2, r7, r7, lsl #2
 1427 007c 9300     		lsls	r3, r2, #2
 1428 007e 174A     		ldr	r2, .L124+4
 1429 0080 1344     		add	r3, r3, r2
 1430 0082 9942     		cmp	r1, r3
 1431 0084 1CD1     		bne	.L117
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1432              		.loc 1 1656 0
 1433 0086 251D     		adds	r5, r4, #4
 1434 0088 2846     		mov	r0, r5
 1435 008a FFF7FEFF 		bl	uxListRemove
 1436              	.LVL131:
 1437 008e 38B9     		cbnz	r0, .L118
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1438              		.loc 1 1661 0
 1439 0090 0123     		movs	r3, #1
 1440 0092 03FA07F7 		lsl	r7, r3, r7
 1441              	.LVL132:
 1442 0096 124A     		ldr	r2, .L124+8
 1443 0098 1368     		ldr	r3, [r2]
 1444 009a 23EA0703 		bic	r3, r3, r7
 1445 009e 1360     		str	r3, [r2]
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 123


 1446              	.L118:
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1447              		.loc 1 1667 0
 1448 00a0 E36A     		ldr	r3, [r4, #44]
 1449 00a2 0122     		movs	r2, #1
 1450 00a4 02FA03F1 		lsl	r1, r2, r3
 1451 00a8 0D48     		ldr	r0, .L124+8
 1452 00aa 0268     		ldr	r2, [r0]
 1453 00ac 0A43     		orrs	r2, r2, r1
 1454 00ae 0260     		str	r2, [r0]
 1455 00b0 03EB8303 		add	r3, r3, r3, lsl #2
 1456 00b4 9A00     		lsls	r2, r3, #2
 1457 00b6 2946     		mov	r1, r5
 1458 00b8 0848     		ldr	r0, .L124+4
 1459 00ba 1044     		add	r0, r0, r2
 1460 00bc FFF7FEFF 		bl	vListInsertEnd
 1461              	.LVL133:
 1462              	.L117:
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1463              		.loc 1 1674 0
 1464 00c0 3EB1     		cbz	r6, .L112
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1465              		.loc 1 1676 0
 1466 00c2 4FF08052 		mov	r2, #268435456
 1467 00c6 074B     		ldr	r3, .L124+12
 1468 00c8 1A60     		str	r2, [r3]
 1469              		.syntax unified
 1470              	@ 1676 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1471 00ca BFF34F8F 		dsb
 1472              	@ 0 "" 2
 1473              	@ 1676 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1474 00ce BFF36F8F 		isb
 1475              	@ 0 "" 2
 1476              	.LVL134:
 1477              		.thumb
 1478              		.syntax unified
 1479              	.L112:
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1480              		.loc 1 1688 0
 1481 00d2 FFF7FEFF 		bl	vPortExitCritical
 1482              	.LVL135:
 1483 00d6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1484              	.LVL136:
 1485              	.L125:
 1486              		.align	2
 1487              	.L124:
 1488 00d8 00000000 		.word	.LANCHOR10
 1489 00dc 00000000 		.word	.LANCHOR4
 1490 00e0 00000000 		.word	.LANCHOR13
 1491 00e4 04ED00E0 		.word	-536810236
 1492              		.cfi_endproc
 1493              	.LFE13:
 1495              		.section	.text.vTaskResume,"ax",%progbits
 1496              		.align	2
 1497              		.global	vTaskResume
 1498              		.thumb
 1499              		.thumb_func
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 124


 1501              	vTaskResume:
 1502              	.LFB16:
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1503              		.loc 1 1844 0
 1504              		.cfi_startproc
 1505              		@ args = 0, pretend = 0, frame = 0
 1506              		@ frame_needed = 0, uses_anonymous_args = 0
 1507              	.LVL137:
 1508 0000 38B5     		push	{r3, r4, r5, lr}
 1509              	.LCFI17:
 1510              		.cfi_def_cfa_offset 16
 1511              		.cfi_offset 3, -16
 1512              		.cfi_offset 4, -12
 1513              		.cfi_offset 5, -8
 1514              		.cfi_offset 14, -4
 1515              	.LVL138:
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1516              		.loc 1 1848 0
 1517 0002 40B9     		cbnz	r0, .L127
 1518              	.LBB129:
 1519              	.LBB130:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1520              		.loc 2 195 0
 1521              		.syntax unified
 1522              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1523 0004 4FF05003 			mov r3, #80												
 1524 0008 83F31188 		msr basepri, r3											
 1525 000c BFF36F8F 		isb														
 1526 0010 BFF34F8F 		dsb														
 1527              	
 1528              	@ 0 "" 2
 1529              	.LVL139:
 1530              		.thumb
 1531              		.syntax unified
 1532              	.L128:
 1533 0014 FEE7     		b	.L128
 1534              	.L127:
 1535 0016 0446     		mov	r4, r0
 1536              	.LBE130:
 1537              	.LBE129:
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1538              		.loc 1 1852 0
 1539 0018 174B     		ldr	r3, .L132
 1540 001a 1B68     		ldr	r3, [r3]
 1541 001c 9842     		cmp	r0, r3
 1542 001e 2AD0     		beq	.L126
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1543              		.loc 1 1852 0 is_stmt 0 discriminator 1
 1544 0020 48B3     		cbz	r0, .L126
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1545              		.loc 1 1854 0 is_stmt 1
 1546 0022 FFF7FEFF 		bl	vPortEnterCritical
 1547              	.LVL140:
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1548              		.loc 1 1856 0
 1549 0026 2046     		mov	r0, r4
 1550 0028 FFF7FEFF 		bl	prvTaskIsTaskSuspended
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 125


 1551              	.LVL141:
 1552 002c 08B3     		cbz	r0, .L130
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1553              		.loc 1 1862 0
 1554 002e 251D     		adds	r5, r4, #4
 1555 0030 2846     		mov	r0, r5
 1556 0032 FFF7FEFF 		bl	uxListRemove
 1557              	.LVL142:
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1558              		.loc 1 1863 0
 1559 0036 E36A     		ldr	r3, [r4, #44]
 1560 0038 0122     		movs	r2, #1
 1561 003a 02FA03F1 		lsl	r1, r2, r3
 1562 003e 0F48     		ldr	r0, .L132+4
 1563 0040 0268     		ldr	r2, [r0]
 1564 0042 0A43     		orrs	r2, r2, r1
 1565 0044 0260     		str	r2, [r0]
 1566 0046 03EB8303 		add	r3, r3, r3, lsl #2
 1567 004a 9A00     		lsls	r2, r3, #2
 1568 004c 2946     		mov	r1, r5
 1569 004e 0C48     		ldr	r0, .L132+8
 1570 0050 1044     		add	r0, r0, r2
 1571 0052 FFF7FEFF 		bl	vListInsertEnd
 1572              	.LVL143:
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1573              		.loc 1 1866 0
 1574 0056 E26A     		ldr	r2, [r4, #44]
 1575 0058 074B     		ldr	r3, .L132
 1576 005a 1B68     		ldr	r3, [r3]
 1577 005c DB6A     		ldr	r3, [r3, #44]
 1578 005e 9A42     		cmp	r2, r3
 1579 0060 07D3     		bcc	.L130
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1580              		.loc 1 1871 0
 1581 0062 4FF08052 		mov	r2, #268435456
 1582 0066 074B     		ldr	r3, .L132+12
 1583 0068 1A60     		str	r2, [r3]
 1584              		.syntax unified
 1585              	@ 1871 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1586 006a BFF34F8F 		dsb
 1587              	@ 0 "" 2
 1588              	@ 1871 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1589 006e BFF36F8F 		isb
 1590              	@ 0 "" 2
 1591              		.thumb
 1592              		.syntax unified
 1593              	.L130:
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1594              		.loc 1 1883 0
 1595 0072 FFF7FEFF 		bl	vPortExitCritical
 1596              	.LVL144:
 1597              	.L126:
 1598 0076 38BD     		pop	{r3, r4, r5, pc}
 1599              	.LVL145:
 1600              	.L133:
 1601              		.align	2
 1602              	.L132:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 126


 1603 0078 00000000 		.word	.LANCHOR10
 1604 007c 00000000 		.word	.LANCHOR13
 1605 0080 00000000 		.word	.LANCHOR4
 1606 0084 04ED00E0 		.word	-536810236
 1607              		.cfi_endproc
 1608              	.LFE16:
 1610              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1611              		.align	2
 1612              		.global	xTaskResumeFromISR
 1613              		.thumb
 1614              		.thumb_func
 1616              	xTaskResumeFromISR:
 1617              	.LFB17:
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1618              		.loc 1 1898 0
 1619              		.cfi_startproc
 1620              		@ args = 0, pretend = 0, frame = 0
 1621              		@ frame_needed = 0, uses_anonymous_args = 0
 1622              	.LVL146:
 1623 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1624              	.LCFI18:
 1625              		.cfi_def_cfa_offset 24
 1626              		.cfi_offset 3, -24
 1627              		.cfi_offset 4, -20
 1628              		.cfi_offset 5, -16
 1629              		.cfi_offset 6, -12
 1630              		.cfi_offset 7, -8
 1631              		.cfi_offset 14, -4
 1632              	.LVL147:
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1633              		.loc 1 1903 0
 1634 0002 40B9     		cbnz	r0, .L135
 1635              	.LBB131:
 1636              	.LBB132:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1637              		.loc 2 195 0
 1638              		.syntax unified
 1639              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1640 0004 4FF05003 			mov r3, #80												
 1641 0008 83F31188 		msr basepri, r3											
 1642 000c BFF36F8F 		isb														
 1643 0010 BFF34F8F 		dsb														
 1644              	
 1645              	@ 0 "" 2
 1646              	.LVL148:
 1647              		.thumb
 1648              		.syntax unified
 1649              	.L136:
 1650 0014 FEE7     		b	.L136
 1651              	.L135:
 1652 0016 0446     		mov	r4, r0
 1653              	.LBE132:
 1654              	.LBE131:
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1655              		.loc 1 1921 0
 1656 0018 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1657              	.LVL149:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 127


 1658              	.LBB133:
 1659              	.LBB134:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1660              		.loc 2 211 0
 1661              		.syntax unified
 1662              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1663 001c EFF31187 			mrs r7, basepri											
 1664 0020 4FF05003 		mov r3, #80												
 1665 0024 83F31188 		msr basepri, r3											
 1666 0028 BFF36F8F 		isb														
 1667 002c BFF34F8F 		dsb														
 1668              	
 1669              	@ 0 "" 2
 1670              		.thumb
 1671              		.syntax unified
 1672              	.LBE134:
 1673              	.LBE133:
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1674              		.loc 1 1925 0
 1675 0030 2046     		mov	r0, r4
 1676 0032 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1677              	.LVL150:
 1678 0036 38B3     		cbz	r0, .L140
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1679              		.loc 1 1930 0
 1680 0038 164B     		ldr	r3, .L143
 1681 003a 1B68     		ldr	r3, [r3]
 1682 003c EBB9     		cbnz	r3, .L138
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1683              		.loc 1 1934 0
 1684 003e E26A     		ldr	r2, [r4, #44]
 1685 0040 154B     		ldr	r3, .L143+4
 1686 0042 1B68     		ldr	r3, [r3]
 1687 0044 DB6A     		ldr	r3, [r3, #44]
 1688 0046 9A42     		cmp	r2, r3
 1689 0048 01D2     		bcs	.L141
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1690              		.loc 1 1899 0
 1691 004a 0025     		movs	r5, #0
 1692 004c 00E0     		b	.L139
 1693              	.L141:
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1694              		.loc 1 1936 0
 1695 004e 0125     		movs	r5, #1
 1696              	.L139:
 1697              	.LVL151:
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1698              		.loc 1 1943 0
 1699 0050 261D     		adds	r6, r4, #4
 1700 0052 3046     		mov	r0, r6
 1701 0054 FFF7FEFF 		bl	uxListRemove
 1702              	.LVL152:
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1703              		.loc 1 1944 0
 1704 0058 E36A     		ldr	r3, [r4, #44]
 1705 005a 0122     		movs	r2, #1
 1706 005c 02FA03F1 		lsl	r1, r2, r3
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 128


 1707 0060 0E48     		ldr	r0, .L143+8
 1708 0062 0268     		ldr	r2, [r0]
 1709 0064 0A43     		orrs	r2, r2, r1
 1710 0066 0260     		str	r2, [r0]
 1711 0068 03EB8303 		add	r3, r3, r3, lsl #2
 1712 006c 9A00     		lsls	r2, r3, #2
 1713 006e 3146     		mov	r1, r6
 1714 0070 0B48     		ldr	r0, .L143+12
 1715 0072 1044     		add	r0, r0, r2
 1716 0074 FFF7FEFF 		bl	vListInsertEnd
 1717              	.LVL153:
 1718 0078 07E0     		b	.L137
 1719              	.LVL154:
 1720              	.L138:
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1721              		.loc 1 1951 0
 1722 007a 04F11801 		add	r1, r4, #24
 1723 007e 0948     		ldr	r0, .L143+16
 1724 0080 FFF7FEFF 		bl	vListInsertEnd
 1725              	.LVL155:
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 1726              		.loc 1 1899 0
 1727 0084 0025     		movs	r5, #0
 1728 0086 00E0     		b	.L137
 1729              	.L140:
 1730 0088 0025     		movs	r5, #0
 1731              	.LVL156:
 1732              	.L137:
 1733              	.LBB135:
 1734              	.LBB136:
 1735              		.loc 2 229 0
 1736              		.syntax unified
 1737              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1738 008a 87F31188 			msr basepri, r7	
 1739              	@ 0 "" 2
 1740              	.LVL157:
 1741              		.thumb
 1742              		.syntax unified
 1743              	.LBE136:
 1744              	.LBE135:
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1745              		.loc 1 1962 0
 1746 008e 2846     		mov	r0, r5
 1747 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1748              	.LVL158:
 1749              	.L144:
 1750 0092 00BF     		.align	2
 1751              	.L143:
 1752 0094 00000000 		.word	.LANCHOR16
 1753 0098 00000000 		.word	.LANCHOR10
 1754 009c 00000000 		.word	.LANCHOR13
 1755 00a0 00000000 		.word	.LANCHOR4
 1756 00a4 00000000 		.word	.LANCHOR1
 1757              		.cfi_endproc
 1758              	.LFE17:
 1760              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1761              		.align	2
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 129


 1762              		.global	vTaskStartScheduler
 1763              		.thumb
 1764              		.thumb_func
 1766              	vTaskStartScheduler:
 1767              	.LFB18:
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1768              		.loc 1 1968 0
 1769              		.cfi_startproc
 1770              		@ args = 0, pretend = 0, frame = 16
 1771              		@ frame_needed = 0, uses_anonymous_args = 0
 1772 0000 10B5     		push	{r4, lr}
 1773              	.LCFI19:
 1774              		.cfi_def_cfa_offset 8
 1775              		.cfi_offset 4, -8
 1776              		.cfi_offset 14, -4
 1777 0002 88B0     		sub	sp, sp, #32
 1778              	.LCFI20:
 1779              		.cfi_def_cfa_offset 40
 1780              	.LBB137:
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 1781              		.loc 1 1974 0
 1782 0004 0024     		movs	r4, #0
 1783 0006 0594     		str	r4, [sp, #20]
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
 1784              		.loc 1 1975 0
 1785 0008 0694     		str	r4, [sp, #24]
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 1786              		.loc 1 1980 0
 1787 000a 07AA     		add	r2, sp, #28
 1788 000c 06A9     		add	r1, sp, #24
 1789 000e 05A8     		add	r0, sp, #20
 1790 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 1791              	.LVL159:
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
 1792              		.loc 1 1981 0
 1793 0014 059B     		ldr	r3, [sp, #20]
 1794 0016 0293     		str	r3, [sp, #8]
 1795 0018 069B     		ldr	r3, [sp, #24]
 1796 001a 0193     		str	r3, [sp, #4]
 1797 001c 0094     		str	r4, [sp]
 1798 001e 2346     		mov	r3, r4
 1799 0020 079A     		ldr	r2, [sp, #28]
 1800 0022 0F49     		ldr	r1, .L152
 1801 0024 0F48     		ldr	r0, .L152+4
 1802 0026 FFF7FEFF 		bl	xTaskCreateStatic
 1803              	.LVL160:
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1804              		.loc 1 1989 0
 1805 002a 08B1     		cbz	r0, .L150
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1806              		.loc 1 1991 0
 1807 002c 0123     		movs	r3, #1
 1808 002e 00E0     		b	.L146
 1809              	.L150:
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1810              		.loc 1 1995 0
 1811 0030 0023     		movs	r3, #0
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 130


 1812              	.L146:
 1813              	.LVL161:
 1814              	.LBE137:
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1815              		.loc 1 2023 0
 1816 0032 9BB1     		cbz	r3, .L145
 1817              	.LBB138:
 1818              	.LBB139:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1819              		.loc 2 195 0
 1820              		.syntax unified
 1821              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1822 0034 4FF05003 			mov r3, #80												
 1823 0038 83F31188 		msr basepri, r3											
 1824 003c BFF36F8F 		isb														
 1825 0040 BFF34F8F 		dsb														
 1826              	
 1827              	@ 0 "" 2
 1828              	.LVL162:
 1829              		.thumb
 1830              		.syntax unified
 1831              	.LBE139:
 1832              	.LBE138:
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1833              		.loc 1 2049 0
 1834 0044 4FF0FF32 		mov	r2, #-1
 1835 0048 074B     		ldr	r3, .L152+8
 1836 004a 1A60     		str	r2, [r3]
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 1837              		.loc 1 2050 0
 1838 004c 0122     		movs	r2, #1
 1839 004e 074B     		ldr	r3, .L152+12
 1840 0050 1A60     		str	r2, [r3]
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1841              		.loc 1 2051 0
 1842 0052 0022     		movs	r2, #0
 1843 0054 064B     		ldr	r3, .L152+16
 1844 0056 1A60     		str	r2, [r3]
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1845              		.loc 1 2065 0
 1846 0058 FFF7FEFF 		bl	xPortStartScheduler
 1847              	.LVL163:
 1848              	.L145:
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1849              		.loc 1 2086 0
 1850 005c 08B0     		add	sp, sp, #32
 1851              	.LCFI21:
 1852              		.cfi_def_cfa_offset 8
 1853              		@ sp needed
 1854 005e 10BD     		pop	{r4, pc}
 1855              	.L153:
 1856              		.align	2
 1857              	.L152:
 1858 0060 00000000 		.word	.LC0
 1859 0064 00000000 		.word	prvIdleTask
 1860 0068 00000000 		.word	.LANCHOR3
 1861 006c 00000000 		.word	.LANCHOR11
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 131


 1862 0070 00000000 		.word	.LANCHOR15
 1863              		.cfi_endproc
 1864              	.LFE18:
 1866              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1867              		.align	2
 1868              		.global	vTaskEndScheduler
 1869              		.thumb
 1870              		.thumb_func
 1872              	vTaskEndScheduler:
 1873              	.LFB19:
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1874              		.loc 1 2090 0
 1875              		.cfi_startproc
 1876              		@ args = 0, pretend = 0, frame = 0
 1877              		@ frame_needed = 0, uses_anonymous_args = 0
 1878 0000 08B5     		push	{r3, lr}
 1879              	.LCFI22:
 1880              		.cfi_def_cfa_offset 8
 1881              		.cfi_offset 3, -8
 1882              		.cfi_offset 14, -4
 1883              	.LBB140:
 1884              	.LBB141:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1885              		.loc 2 195 0
 1886              		.syntax unified
 1887              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1888 0002 4FF05003 			mov r3, #80												
 1889 0006 83F31188 		msr basepri, r3											
 1890 000a BFF36F8F 		isb														
 1891 000e BFF34F8F 		dsb														
 1892              	
 1893              	@ 0 "" 2
 1894              		.thumb
 1895              		.syntax unified
 1896              	.LBE141:
 1897              	.LBE140:
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1898              		.loc 1 2095 0
 1899 0012 0022     		movs	r2, #0
 1900 0014 024B     		ldr	r3, .L156
 1901 0016 1A60     		str	r2, [r3]
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1902              		.loc 1 2096 0
 1903 0018 FFF7FEFF 		bl	vPortEndScheduler
 1904              	.LVL164:
 1905 001c 08BD     		pop	{r3, pc}
 1906              	.L157:
 1907 001e 00BF     		.align	2
 1908              	.L156:
 1909 0020 00000000 		.word	.LANCHOR11
 1910              		.cfi_endproc
 1911              	.LFE19:
 1913              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1914              		.align	2
 1915              		.global	vTaskSuspendAll
 1916              		.thumb
 1917              		.thumb_func
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 132


 1919              	vTaskSuspendAll:
 1920              	.LFB20:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1921              		.loc 1 2101 0
 1922              		.cfi_startproc
 1923              		@ args = 0, pretend = 0, frame = 0
 1924              		@ frame_needed = 0, uses_anonymous_args = 0
 1925              		@ link register save eliminated.
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
 1926              		.loc 1 2106 0
 1927 0000 024A     		ldr	r2, .L159
 1928 0002 1368     		ldr	r3, [r2]
 1929 0004 0133     		adds	r3, r3, #1
 1930 0006 1360     		str	r3, [r2]
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1931              		.loc 1 2107 0
 1932 0008 7047     		bx	lr
 1933              	.L160:
 1934 000a 00BF     		.align	2
 1935              	.L159:
 1936 000c 00000000 		.word	.LANCHOR16
 1937              		.cfi_endproc
 1938              	.LFE20:
 1940              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1941              		.align	2
 1942              		.global	xTaskGetTickCount
 1943              		.thumb
 1944              		.thumb_func
 1946              	xTaskGetTickCount:
 1947              	.LFB22:
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 1948              		.loc 1 2285 0
 1949              		.cfi_startproc
 1950              		@ args = 0, pretend = 0, frame = 0
 1951              		@ frame_needed = 0, uses_anonymous_args = 0
 1952              		@ link register save eliminated.
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1953              		.loc 1 2291 0
 1954 0000 014B     		ldr	r3, .L162
 1955 0002 1868     		ldr	r0, [r3]
 1956              	.LVL165:
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1957              		.loc 1 2296 0
 1958 0004 7047     		bx	lr
 1959              	.L163:
 1960 0006 00BF     		.align	2
 1961              	.L162:
 1962 0008 00000000 		.word	.LANCHOR15
 1963              		.cfi_endproc
 1964              	.LFE22:
 1966              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1967              		.align	2
 1968              		.global	xTaskGetTickCountFromISR
 1969              		.thumb
 1970              		.thumb_func
 1972              	xTaskGetTickCountFromISR:
 1973              	.LFB23:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 133


2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 1974              		.loc 1 2300 0
 1975              		.cfi_startproc
 1976              		@ args = 0, pretend = 0, frame = 0
 1977              		@ frame_needed = 0, uses_anonymous_args = 0
 1978 0000 08B5     		push	{r3, lr}
 1979              	.LCFI23:
 1980              		.cfi_def_cfa_offset 8
 1981              		.cfi_offset 3, -8
 1982              		.cfi_offset 14, -4
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1983              		.loc 1 2318 0
 1984 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1985              	.LVL166:
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1986              		.loc 1 2322 0
 1987 0006 014B     		ldr	r3, .L166
 1988 0008 1868     		ldr	r0, [r3]
 1989              	.LVL167:
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1990              		.loc 1 2327 0
 1991 000a 08BD     		pop	{r3, pc}
 1992              	.L167:
 1993              		.align	2
 1994              	.L166:
 1995 000c 00000000 		.word	.LANCHOR15
 1996              		.cfi_endproc
 1997              	.LFE23:
 1999              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2000              		.align	2
 2001              		.global	uxTaskGetNumberOfTasks
 2002              		.thumb
 2003              		.thumb_func
 2005              	uxTaskGetNumberOfTasks:
 2006              	.LFB24:
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 2007              		.loc 1 2331 0
 2008              		.cfi_startproc
 2009              		@ args = 0, pretend = 0, frame = 0
 2010              		@ frame_needed = 0, uses_anonymous_args = 0
 2011              		@ link register save eliminated.
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2012              		.loc 1 2334 0
 2013 0000 014B     		ldr	r3, .L169
 2014 0002 1868     		ldr	r0, [r3]
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2015              		.loc 1 2335 0
 2016 0004 7047     		bx	lr
 2017              	.L170:
 2018 0006 00BF     		.align	2
 2019              	.L169:
 2020 0008 00000000 		.word	.LANCHOR9
 2021              		.cfi_endproc
 2022              	.LFE24:
 2024              		.section	.text.pcTaskGetName,"ax",%progbits
 2025              		.align	2
 2026              		.global	pcTaskGetName
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 134


 2027              		.thumb
 2028              		.thumb_func
 2030              	pcTaskGetName:
 2031              	.LFB25:
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 2032              		.loc 1 2339 0
 2033              		.cfi_startproc
 2034              		@ args = 0, pretend = 0, frame = 0
 2035              		@ frame_needed = 0, uses_anonymous_args = 0
 2036              		@ link register save eliminated.
 2037              	.LVL168:
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2038              		.loc 1 2344 0
 2039 0000 0346     		mov	r3, r0
 2040 0002 08B9     		cbnz	r0, .L172
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2041              		.loc 1 2344 0 is_stmt 0 discriminator 1
 2042 0004 074B     		ldr	r3, .L175
 2043 0006 1B68     		ldr	r3, [r3]
 2044              	.LVL169:
 2045              	.L172:
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2046              		.loc 1 2345 0 is_stmt 1 discriminator 4
 2047 0008 43B9     		cbnz	r3, .L173
 2048              	.LBB142:
 2049              	.LBB143:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2050              		.loc 2 195 0
 2051              		.syntax unified
 2052              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2053 000a 4FF05003 			mov r3, #80												
 2054 000e 83F31188 		msr basepri, r3											
 2055 0012 BFF36F8F 		isb														
 2056 0016 BFF34F8F 		dsb														
 2057              	
 2058              	@ 0 "" 2
 2059              	.LVL170:
 2060              		.thumb
 2061              		.syntax unified
 2062              	.L174:
 2063 001a FEE7     		b	.L174
 2064              	.LVL171:
 2065              	.L173:
 2066              	.LBE143:
 2067              	.LBE142:
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2068              		.loc 1 2347 0
 2069 001c 03F13400 		add	r0, r3, #52
 2070 0020 7047     		bx	lr
 2071              	.L176:
 2072 0022 00BF     		.align	2
 2073              	.L175:
 2074 0024 00000000 		.word	.LANCHOR10
 2075              		.cfi_endproc
 2076              	.LFE25:
 2078              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2079              		.align	2
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 135


 2080              		.global	xTaskIncrementTick
 2081              		.thumb
 2082              		.thumb_func
 2084              	xTaskIncrementTick:
 2085              	.LFB26:
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2086              		.loc 1 2666 0
 2087              		.cfi_startproc
 2088              		@ args = 0, pretend = 0, frame = 0
 2089              		@ frame_needed = 0, uses_anonymous_args = 0
 2090 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2091              	.LCFI24:
 2092              		.cfi_def_cfa_offset 24
 2093              		.cfi_offset 3, -24
 2094              		.cfi_offset 4, -20
 2095              		.cfi_offset 5, -16
 2096              		.cfi_offset 6, -12
 2097              		.cfi_offset 7, -8
 2098              		.cfi_offset 14, -4
 2099              	.LVL172:
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2100              		.loc 1 2675 0
 2101 0002 3B4B     		ldr	r3, .L196
 2102 0004 1B68     		ldr	r3, [r3]
 2103 0006 002B     		cmp	r3, #0
 2104 0008 65D1     		bne	.L178
 2105              	.LBB144:
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2106              		.loc 1 2679 0
 2107 000a 3A4B     		ldr	r3, .L196+4
 2108 000c 1D68     		ldr	r5, [r3]
 2109 000e 0135     		adds	r5, r5, #1
 2110              	.LVL173:
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2111              		.loc 1 2683 0
 2112 0010 1D60     		str	r5, [r3]
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2113              		.loc 1 2685 0
 2114 0012 C5B9     		cbnz	r5, .L179
 2115              	.LBB145:
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2116              		.loc 1 2687 0
 2117 0014 384B     		ldr	r3, .L196+8
 2118 0016 1B68     		ldr	r3, [r3]
 2119 0018 1B68     		ldr	r3, [r3]
 2120 001a 43B1     		cbz	r3, .L180
 2121              	.LBB146:
 2122              	.LBB147:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2123              		.loc 2 195 0
 2124              		.syntax unified
 2125              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2126 001c 4FF05003 			mov r3, #80												
 2127 0020 83F31188 		msr basepri, r3											
 2128 0024 BFF36F8F 		isb														
 2129 0028 BFF34F8F 		dsb														
 2130              	
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 136


 2131              	@ 0 "" 2
 2132              	.LVL174:
 2133              		.thumb
 2134              		.syntax unified
 2135              	.L181:
 2136 002c FEE7     		b	.L181
 2137              	.L180:
 2138              	.LBE147:
 2139              	.LBE146:
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2140              		.loc 1 2687 0 discriminator 2
 2141 002e 324A     		ldr	r2, .L196+8
 2142 0030 1168     		ldr	r1, [r2]
 2143              	.LVL175:
 2144 0032 324B     		ldr	r3, .L196+12
 2145 0034 1868     		ldr	r0, [r3]
 2146 0036 1060     		str	r0, [r2]
 2147 0038 1960     		str	r1, [r3]
 2148 003a 314A     		ldr	r2, .L196+16
 2149 003c 1368     		ldr	r3, [r2]
 2150 003e 0133     		adds	r3, r3, #1
 2151 0040 1360     		str	r3, [r2]
 2152 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2153              	.LVL176:
 2154              	.L179:
 2155              	.LBE145:
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2156              		.loc 1 2698 0
 2157 0046 2F4B     		ldr	r3, .L196+20
 2158 0048 1B68     		ldr	r3, [r3]
 2159 004a 9D42     		cmp	r5, r3
 2160 004c 03D2     		bcs	.L191
 2161              	.LBE144:
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2162              		.loc 1 2669 0
 2163 004e 0024     		movs	r4, #0
 2164 0050 36E0     		b	.L183
 2165              	.LVL177:
 2166              	.L192:
 2167              	.LBB148:
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2168              		.loc 1 2764 0
 2169 0052 0124     		movs	r4, #1
 2170              	.LVL178:
 2171 0054 00E0     		b	.L182
 2172              	.LVL179:
 2173              	.L191:
 2174 0056 0024     		movs	r4, #0
 2175              	.LVL180:
 2176              	.L182:
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2177              		.loc 1 2702 0
 2178 0058 274B     		ldr	r3, .L196+8
 2179 005a 1B68     		ldr	r3, [r3]
 2180 005c 1B68     		ldr	r3, [r3]
 2181 005e 23B9     		cbnz	r3, .L184
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 137


 2182              		.loc 1 2709 0
 2183 0060 4FF0FF32 		mov	r2, #-1
 2184 0064 274B     		ldr	r3, .L196+20
 2185 0066 1A60     		str	r2, [r3]
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2186              		.loc 1 2710 0
 2187 0068 2AE0     		b	.L183
 2188              	.L184:
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2189              		.loc 1 2718 0
 2190 006a 234B     		ldr	r3, .L196+8
 2191 006c 1B68     		ldr	r3, [r3]
 2192 006e DB68     		ldr	r3, [r3, #12]
 2193 0070 DE68     		ldr	r6, [r3, #12]
 2194              	.LVL181:
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2195              		.loc 1 2719 0
 2196 0072 7368     		ldr	r3, [r6, #4]
 2197              	.LVL182:
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2198              		.loc 1 2721 0
 2199 0074 9D42     		cmp	r5, r3
 2200 0076 02D2     		bcs	.L185
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 2201              		.loc 1 2728 0
 2202 0078 224A     		ldr	r2, .L196+20
 2203 007a 1360     		str	r3, [r2]
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2204              		.loc 1 2729 0
 2205 007c 20E0     		b	.L183
 2206              	.L185:
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2207              		.loc 1 2737 0
 2208 007e 371D     		adds	r7, r6, #4
 2209 0080 3846     		mov	r0, r7
 2210 0082 FFF7FEFF 		bl	uxListRemove
 2211              	.LVL183:
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2212              		.loc 1 2741 0
 2213 0086 B36A     		ldr	r3, [r6, #40]
 2214 0088 1BB1     		cbz	r3, .L186
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2215              		.loc 1 2743 0
 2216 008a 06F11800 		add	r0, r6, #24
 2217 008e FFF7FEFF 		bl	uxListRemove
 2218              	.LVL184:
 2219              	.L186:
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2220              		.loc 1 2752 0
 2221 0092 F36A     		ldr	r3, [r6, #44]
 2222 0094 0122     		movs	r2, #1
 2223 0096 02FA03F1 		lsl	r1, r2, r3
 2224 009a 1B48     		ldr	r0, .L196+24
 2225 009c 0268     		ldr	r2, [r0]
 2226 009e 0A43     		orrs	r2, r2, r1
 2227 00a0 0260     		str	r2, [r0]
 2228 00a2 03EB8303 		add	r3, r3, r3, lsl #2
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 138


 2229 00a6 9A00     		lsls	r2, r3, #2
 2230 00a8 3946     		mov	r1, r7
 2231 00aa 1848     		ldr	r0, .L196+28
 2232 00ac 1044     		add	r0, r0, r2
 2233 00ae FFF7FEFF 		bl	vListInsertEnd
 2234              	.LVL185:
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2235              		.loc 1 2762 0
 2236 00b2 F26A     		ldr	r2, [r6, #44]
 2237 00b4 164B     		ldr	r3, .L196+32
 2238 00b6 1B68     		ldr	r3, [r3]
 2239 00b8 DB6A     		ldr	r3, [r3, #44]
 2240 00ba 9A42     		cmp	r2, r3
 2241 00bc C9D2     		bcs	.L192
 2242 00be CBE7     		b	.L182
 2243              	.LVL186:
 2244              	.L183:
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2245              		.loc 1 2781 0
 2246 00c0 134B     		ldr	r3, .L196+32
 2247 00c2 1B68     		ldr	r3, [r3]
 2248 00c4 DB6A     		ldr	r3, [r3, #44]
 2249 00c6 03EB8303 		add	r3, r3, r3, lsl #2
 2250 00ca 9A00     		lsls	r2, r3, #2
 2251 00cc 0F4B     		ldr	r3, .L196+28
 2252 00ce 9B58     		ldr	r3, [r3, r2]
 2253 00d0 012B     		cmp	r3, #1
 2254 00d2 06D8     		bhi	.L193
 2255 00d4 06E0     		b	.L189
 2256              	.LVL187:
 2257              	.L178:
 2258              	.LBE148:
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2259              		.loc 1 2809 0
 2260 00d6 0F4A     		ldr	r2, .L196+36
 2261 00d8 1368     		ldr	r3, [r2]
 2262 00da 0133     		adds	r3, r3, #1
 2263 00dc 1360     		str	r3, [r2]
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2264              		.loc 1 2669 0
 2265 00de 0024     		movs	r4, #0
 2266 00e0 00E0     		b	.L189
 2267              	.LVL188:
 2268              	.L193:
 2269              	.LBB149:
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2270              		.loc 1 2783 0
 2271 00e2 0124     		movs	r4, #1
 2272              	.LVL189:
 2273              	.L189:
 2274              	.LBE149:
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2275              		.loc 1 2822 0
 2276 00e4 0C4B     		ldr	r3, .L196+40
 2277 00e6 1B68     		ldr	r3, [r3]
 2278 00e8 03B1     		cbz	r3, .L190
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 139


 2279              		.loc 1 2824 0
 2280 00ea 0124     		movs	r4, #1
 2281              	.LVL190:
 2282              	.L190:
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2283              		.loc 1 2834 0
 2284 00ec 2046     		mov	r0, r4
 2285 00ee F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2286              	.LVL191:
 2287              	.L197:
 2288              		.align	2
 2289              	.L196:
 2290 00f0 00000000 		.word	.LANCHOR16
 2291 00f4 00000000 		.word	.LANCHOR15
 2292 00f8 00000000 		.word	.LANCHOR2
 2293 00fc 00000000 		.word	.LANCHOR8
 2294 0100 00000000 		.word	.LANCHOR17
 2295 0104 00000000 		.word	.LANCHOR3
 2296 0108 00000000 		.word	.LANCHOR13
 2297 010c 00000000 		.word	.LANCHOR4
 2298 0110 00000000 		.word	.LANCHOR10
 2299 0114 00000000 		.word	.LANCHOR18
 2300 0118 00000000 		.word	.LANCHOR19
 2301              		.cfi_endproc
 2302              	.LFE26:
 2304              		.section	.text.xTaskResumeAll,"ax",%progbits
 2305              		.align	2
 2306              		.global	xTaskResumeAll
 2307              		.thumb
 2308              		.thumb_func
 2310              	xTaskResumeAll:
 2311              	.LFB21:
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2312              		.loc 1 2175 0
 2313              		.cfi_startproc
 2314              		@ args = 0, pretend = 0, frame = 0
 2315              		@ frame_needed = 0, uses_anonymous_args = 0
 2316 0000 38B5     		push	{r3, r4, r5, lr}
 2317              	.LCFI25:
 2318              		.cfi_def_cfa_offset 16
 2319              		.cfi_offset 3, -16
 2320              		.cfi_offset 4, -12
 2321              		.cfi_offset 5, -8
 2322              		.cfi_offset 14, -4
 2323              	.LVL192:
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2324              		.loc 1 2181 0
 2325 0002 344B     		ldr	r3, .L213
 2326 0004 1B68     		ldr	r3, [r3]
 2327 0006 43B9     		cbnz	r3, .L199
 2328              	.LBB150:
 2329              	.LBB151:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2330              		.loc 2 195 0
 2331              		.syntax unified
 2332              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2333 0008 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 140


 2334 000c 83F31188 		msr basepri, r3											
 2335 0010 BFF36F8F 		isb														
 2336 0014 BFF34F8F 		dsb														
 2337              	
 2338              	@ 0 "" 2
 2339              	.LVL193:
 2340              		.thumb
 2341              		.syntax unified
 2342              	.L200:
 2343 0018 FEE7     		b	.L200
 2344              	.L199:
 2345              	.LBE151:
 2346              	.LBE150:
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2347              		.loc 1 2188 0
 2348 001a FFF7FEFF 		bl	vPortEnterCritical
 2349              	.LVL194:
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2350              		.loc 1 2190 0
 2351 001e 2D4B     		ldr	r3, .L213
 2352 0020 1A68     		ldr	r2, [r3]
 2353 0022 013A     		subs	r2, r2, #1
 2354 0024 1A60     		str	r2, [r3]
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2355              		.loc 1 2192 0
 2356 0026 1B68     		ldr	r3, [r3]
 2357 0028 002B     		cmp	r3, #0
 2358 002a 4CD1     		bne	.L209
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2359              		.loc 1 2194 0
 2360 002c 2A4B     		ldr	r3, .L213+4
 2361 002e 1B68     		ldr	r3, [r3]
 2362 0030 33BB     		cbnz	r3, .L210
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2363              		.loc 1 2177 0
 2364 0032 0024     		movs	r4, #0
 2365 0034 4AE0     		b	.L201
 2366              	.LVL195:
 2367              	.L204:
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2368              		.loc 1 2200 0
 2369 0036 294B     		ldr	r3, .L213+8
 2370 0038 DB68     		ldr	r3, [r3, #12]
 2371 003a DC68     		ldr	r4, [r3, #12]
 2372              	.LVL196:
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2373              		.loc 1 2201 0
 2374 003c 04F11800 		add	r0, r4, #24
 2375 0040 FFF7FEFF 		bl	uxListRemove
 2376              	.LVL197:
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2377              		.loc 1 2202 0
 2378 0044 251D     		adds	r5, r4, #4
 2379 0046 2846     		mov	r0, r5
 2380 0048 FFF7FEFF 		bl	uxListRemove
 2381              	.LVL198:
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 141


 2382              		.loc 1 2203 0
 2383 004c E36A     		ldr	r3, [r4, #44]
 2384 004e 0122     		movs	r2, #1
 2385 0050 02FA03F1 		lsl	r1, r2, r3
 2386 0054 2248     		ldr	r0, .L213+12
 2387 0056 0268     		ldr	r2, [r0]
 2388 0058 0A43     		orrs	r2, r2, r1
 2389 005a 0260     		str	r2, [r0]
 2390 005c 03EB8303 		add	r3, r3, r3, lsl #2
 2391 0060 9A00     		lsls	r2, r3, #2
 2392 0062 2946     		mov	r1, r5
 2393 0064 1F48     		ldr	r0, .L213+16
 2394 0066 1044     		add	r0, r0, r2
 2395 0068 FFF7FEFF 		bl	vListInsertEnd
 2396              	.LVL199:
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2397              		.loc 1 2207 0
 2398 006c E26A     		ldr	r2, [r4, #44]
 2399 006e 1E4B     		ldr	r3, .L213+20
 2400 0070 1B68     		ldr	r3, [r3]
 2401 0072 DB6A     		ldr	r3, [r3, #44]
 2402 0074 9A42     		cmp	r2, r3
 2403 0076 04D3     		bcc	.L202
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2404              		.loc 1 2209 0
 2405 0078 0122     		movs	r2, #1
 2406 007a 1C4B     		ldr	r3, .L213+24
 2407 007c 1A60     		str	r2, [r3]
 2408 007e 00E0     		b	.L202
 2409              	.LVL200:
 2410              	.L210:
 2411 0080 0024     		movs	r4, #0
 2412              	.LVL201:
 2413              	.L202:
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2414              		.loc 1 2198 0
 2415 0082 164B     		ldr	r3, .L213+8
 2416 0084 1B68     		ldr	r3, [r3]
 2417 0086 002B     		cmp	r3, #0
 2418 0088 D5D1     		bne	.L204
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2419              		.loc 1 2217 0
 2420 008a 0CB1     		cbz	r4, .L205
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2421              		.loc 1 2225 0
 2422 008c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2423              	.LVL202:
 2424              	.L205:
 2425              	.LBB152:
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2426              		.loc 1 2233 0
 2427 0090 174B     		ldr	r3, .L213+28
 2428 0092 1C68     		ldr	r4, [r3]
 2429              	.LVL203:
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2430              		.loc 1 2235 0
 2431 0094 54B1     		cbz	r4, .L206
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 142


 2432              	.L208:
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2433              		.loc 1 2239 0
 2434 0096 FFF7FEFF 		bl	xTaskIncrementTick
 2435              	.LVL204:
 2436 009a 10B1     		cbz	r0, .L207
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2437              		.loc 1 2241 0
 2438 009c 0122     		movs	r2, #1
 2439 009e 134B     		ldr	r3, .L213+24
 2440 00a0 1A60     		str	r2, [r3]
 2441              	.L207:
 2442              	.LVL205:
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2443              		.loc 1 2248 0
 2444 00a2 013C     		subs	r4, r4, #1
 2445              	.LVL206:
 2446 00a4 F7D1     		bne	.L208
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2447              		.loc 1 2250 0
 2448 00a6 0022     		movs	r2, #0
 2449 00a8 114B     		ldr	r3, .L213+28
 2450 00aa 1A60     		str	r2, [r3]
 2451              	.L206:
 2452              	.LBE152:
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2453              		.loc 1 2258 0
 2454 00ac 0F4B     		ldr	r3, .L213+24
 2455 00ae 1B68     		ldr	r3, [r3]
 2456 00b0 5BB1     		cbz	r3, .L211
 2457              	.LVL207:
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2458              		.loc 1 2265 0
 2459 00b2 4FF08052 		mov	r2, #268435456
 2460 00b6 0F4B     		ldr	r3, .L213+32
 2461 00b8 1A60     		str	r2, [r3]
 2462              		.syntax unified
 2463              	@ 2265 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2464 00ba BFF34F8F 		dsb
 2465              	@ 0 "" 2
 2466              	@ 2265 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2467 00be BFF36F8F 		isb
 2468              	@ 0 "" 2
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2469              		.loc 1 2262 0
 2470              		.thumb
 2471              		.syntax unified
 2472 00c2 0124     		movs	r4, #1
 2473              	.LVL208:
 2474 00c4 02E0     		b	.L201
 2475              	.LVL209:
 2476              	.L209:
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2477              		.loc 1 2177 0
 2478 00c6 0024     		movs	r4, #0
 2479 00c8 00E0     		b	.L201
 2480              	.LVL210:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 143


 2481              	.L211:
 2482 00ca 0024     		movs	r4, #0
 2483              	.LVL211:
 2484              	.L201:
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2485              		.loc 1 2278 0
 2486 00cc FFF7FEFF 		bl	vPortExitCritical
 2487              	.LVL212:
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2488              		.loc 1 2281 0
 2489 00d0 2046     		mov	r0, r4
 2490 00d2 38BD     		pop	{r3, r4, r5, pc}
 2491              	.LVL213:
 2492              	.L214:
 2493              		.align	2
 2494              	.L213:
 2495 00d4 00000000 		.word	.LANCHOR16
 2496 00d8 00000000 		.word	.LANCHOR9
 2497 00dc 00000000 		.word	.LANCHOR1
 2498 00e0 00000000 		.word	.LANCHOR13
 2499 00e4 00000000 		.word	.LANCHOR4
 2500 00e8 00000000 		.word	.LANCHOR10
 2501 00ec 00000000 		.word	.LANCHOR19
 2502 00f0 00000000 		.word	.LANCHOR18
 2503 00f4 04ED00E0 		.word	-536810236
 2504              		.cfi_endproc
 2505              	.LFE21:
 2507              		.section	.text.vTaskDelay,"ax",%progbits
 2508              		.align	2
 2509              		.global	vTaskDelay
 2510              		.thumb
 2511              		.thumb_func
 2513              	vTaskDelay:
 2514              	.LFB10:
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2515              		.loc 1 1334 0
 2516              		.cfi_startproc
 2517              		@ args = 0, pretend = 0, frame = 0
 2518              		@ frame_needed = 0, uses_anonymous_args = 0
 2519              	.LVL214:
 2520 0000 10B5     		push	{r4, lr}
 2521              	.LCFI26:
 2522              		.cfi_def_cfa_offset 8
 2523              		.cfi_offset 4, -8
 2524              		.cfi_offset 14, -4
 2525              	.LVL215:
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2526              		.loc 1 1338 0
 2527 0002 A8B1     		cbz	r0, .L220
 2528 0004 0446     		mov	r4, r0
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2529              		.loc 1 1340 0
 2530 0006 104B     		ldr	r3, .L222
 2531 0008 1B68     		ldr	r3, [r3]
 2532 000a 43B1     		cbz	r3, .L217
 2533              	.LBB153:
 2534              	.LBB154:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 144


 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2535              		.loc 2 195 0
 2536              		.syntax unified
 2537              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2538 000c 4FF05003 			mov r3, #80												
 2539 0010 83F31188 		msr basepri, r3											
 2540 0014 BFF36F8F 		isb														
 2541 0018 BFF34F8F 		dsb														
 2542              	
 2543              	@ 0 "" 2
 2544              	.LVL216:
 2545              		.thumb
 2546              		.syntax unified
 2547              	.L218:
 2548 001c FEE7     		b	.L218
 2549              	.L217:
 2550              	.LBE154:
 2551              	.LBE153:
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2552              		.loc 1 1341 0
 2553 001e FFF7FEFF 		bl	vTaskSuspendAll
 2554              	.LVL217:
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2555              		.loc 1 1352 0
 2556 0022 0021     		movs	r1, #0
 2557 0024 2046     		mov	r0, r4
 2558 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2559              	.LVL218:
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2560              		.loc 1 1354 0
 2561 002a FFF7FEFF 		bl	xTaskResumeAll
 2562              	.LVL219:
 2563 002e 00E0     		b	.L216
 2564              	.LVL220:
 2565              	.L220:
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2566              		.loc 1 1335 0
 2567 0030 0020     		movs	r0, #0
 2568              	.LVL221:
 2569              	.L216:
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2570              		.loc 1 1363 0
 2571 0032 38B9     		cbnz	r0, .L215
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2572              		.loc 1 1365 0
 2573 0034 4FF08052 		mov	r2, #268435456
 2574 0038 044B     		ldr	r3, .L222+4
 2575 003a 1A60     		str	r2, [r3]
 2576              		.syntax unified
 2577              	@ 1365 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2578 003c BFF34F8F 		dsb
 2579              	@ 0 "" 2
 2580              	@ 1365 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2581 0040 BFF36F8F 		isb
 2582              	@ 0 "" 2
 2583              		.thumb
 2584              		.syntax unified
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 145


 2585              	.L215:
 2586 0044 10BD     		pop	{r4, pc}
 2587              	.L223:
 2588 0046 00BF     		.align	2
 2589              	.L222:
 2590 0048 00000000 		.word	.LANCHOR16
 2591 004c 04ED00E0 		.word	-536810236
 2592              		.cfi_endproc
 2593              	.LFE10:
 2595              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2596              		.align	2
 2597              		.global	vTaskSwitchContext
 2598              		.thumb
 2599              		.thumb_func
 2601              	vTaskSwitchContext:
 2602              	.LFB27:
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2603              		.loc 1 2948 0
 2604              		.cfi_startproc
 2605              		@ args = 0, pretend = 0, frame = 0
 2606              		@ frame_needed = 0, uses_anonymous_args = 0
 2607              		@ link register save eliminated.
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2608              		.loc 1 2949 0
 2609 0000 1F4B     		ldr	r3, .L231
 2610 0002 1B68     		ldr	r3, [r3]
 2611 0004 1BB1     		cbz	r3, .L225
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2612              		.loc 1 2953 0
 2613 0006 0122     		movs	r2, #1
 2614 0008 1E4B     		ldr	r3, .L231+4
 2615 000a 1A60     		str	r2, [r3]
 2616 000c 7047     		bx	lr
 2617              	.L225:
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2618              		.loc 1 2957 0
 2619 000e 0022     		movs	r2, #0
 2620 0010 1C4B     		ldr	r3, .L231+4
 2621 0012 1A60     		str	r2, [r3]
 2622              	.LBB155:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2623              		.loc 1 2999 0
 2624 0014 1C4B     		ldr	r3, .L231+8
 2625 0016 1B68     		ldr	r3, [r3]
 2626              	.LVL222:
 2627              	.LBB156:
 2628              	.LBB157:
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 2629              		.loc 2 134 0
 2630              		.syntax unified
 2631              	@ 134 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2632 0018 B3FA83F3 		clz r3, r3
 2633              	@ 0 "" 2
 2634              	.LVL223:
 2635              		.thumb
 2636              		.syntax unified
 2637 001c DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 146


 2638              	.LBE157:
 2639              	.LBE156:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2640              		.loc 1 2999 0
 2641 001e C3F11F03 		rsb	r3, r3, #31
 2642              	.LVL224:
 2643 0022 03EB8301 		add	r1, r3, r3, lsl #2
 2644 0026 8A00     		lsls	r2, r1, #2
 2645 0028 1849     		ldr	r1, .L231+12
 2646 002a 8A58     		ldr	r2, [r1, r2]
 2647 002c 42B9     		cbnz	r2, .L227
 2648              	.LBB158:
 2649              	.LBB159:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2650              		.loc 2 195 0
 2651              		.syntax unified
 2652              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2653 002e 4FF05003 			mov r3, #80												
 2654 0032 83F31188 		msr basepri, r3											
 2655 0036 BFF36F8F 		isb														
 2656 003a BFF34F8F 		dsb														
 2657              	
 2658              	@ 0 "" 2
 2659              	.LVL225:
 2660              		.thumb
 2661              		.syntax unified
 2662              	.L228:
 2663 003e FEE7     		b	.L228
 2664              	.LVL226:
 2665              	.L227:
 2666              	.LBE159:
 2667              	.LBE158:
 2668              	.LBE155:
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2669              		.loc 1 2948 0 discriminator 2
 2670 0040 30B4     		push	{r4, r5}
 2671              	.LCFI27:
 2672              		.cfi_def_cfa_offset 8
 2673              		.cfi_offset 4, -8
 2674              		.cfi_offset 5, -4
 2675              	.LVL227:
 2676              	.LBB161:
 2677              	.LBB160:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2678              		.loc 1 2999 0 discriminator 2
 2679 0042 124D     		ldr	r5, .L231+12
 2680 0044 9900     		lsls	r1, r3, #2
 2681 0046 CA18     		adds	r2, r1, r3
 2682 0048 9000     		lsls	r0, r2, #2
 2683 004a 2844     		add	r0, r0, r5
 2684 004c 4268     		ldr	r2, [r0, #4]
 2685 004e 5468     		ldr	r4, [r2, #4]
 2686 0050 4460     		str	r4, [r0, #4]
 2687 0052 1944     		add	r1, r1, r3
 2688 0054 8A00     		lsls	r2, r1, #2
 2689 0056 0832     		adds	r2, r2, #8
 2690 0058 2A44     		add	r2, r2, r5
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 147


 2691 005a 9442     		cmp	r4, r2
 2692 005c 05D1     		bne	.L229
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2693              		.loc 1 2999 0 is_stmt 0 discriminator 3
 2694 005e 6068     		ldr	r0, [r4, #4]
 2695 0060 03EB8301 		add	r1, r3, r3, lsl #2
 2696 0064 8A00     		lsls	r2, r1, #2
 2697 0066 2A44     		add	r2, r2, r5
 2698 0068 5060     		str	r0, [r2, #4]
 2699              	.L229:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2700              		.loc 1 2999 0 discriminator 5
 2701 006a 03EB8303 		add	r3, r3, r3, lsl #2
 2702              	.LVL228:
 2703 006e 9A00     		lsls	r2, r3, #2
 2704 0070 064B     		ldr	r3, .L231+12
 2705 0072 1A44     		add	r2, r2, r3
 2706 0074 5368     		ldr	r3, [r2, #4]
 2707 0076 DA68     		ldr	r2, [r3, #12]
 2708 0078 054B     		ldr	r3, .L231+16
 2709 007a 1A60     		str	r2, [r3]
 2710              	.LBE160:
 2711              	.LBE161:
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2712              		.loc 1 3017 0 is_stmt 1 discriminator 5
 2713 007c 30BC     		pop	{r4, r5}
 2714              	.LCFI28:
 2715              		.cfi_restore 5
 2716              		.cfi_restore 4
 2717              		.cfi_def_cfa_offset 0
 2718 007e 7047     		bx	lr
 2719              	.L232:
 2720              		.align	2
 2721              	.L231:
 2722 0080 00000000 		.word	.LANCHOR16
 2723 0084 00000000 		.word	.LANCHOR19
 2724 0088 00000000 		.word	.LANCHOR13
 2725 008c 00000000 		.word	.LANCHOR4
 2726 0090 00000000 		.word	.LANCHOR10
 2727              		.cfi_endproc
 2728              	.LFE27:
 2730              		.section	.text.vTaskSuspend,"ax",%progbits
 2731              		.align	2
 2732              		.global	vTaskSuspend
 2733              		.thumb
 2734              		.thumb_func
 2736              	vTaskSuspend:
 2737              	.LFB14:
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2738              		.loc 1 1697 0
 2739              		.cfi_startproc
 2740              		@ args = 0, pretend = 0, frame = 0
 2741              		@ frame_needed = 0, uses_anonymous_args = 0
 2742              	.LVL229:
 2743 0000 38B5     		push	{r3, r4, r5, lr}
 2744              	.LCFI29:
 2745              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 148


 2746              		.cfi_offset 3, -16
 2747              		.cfi_offset 4, -12
 2748              		.cfi_offset 5, -8
 2749              		.cfi_offset 14, -4
 2750 0002 0446     		mov	r4, r0
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2751              		.loc 1 1700 0
 2752 0004 FFF7FEFF 		bl	vPortEnterCritical
 2753              	.LVL230:
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2754              		.loc 1 1704 0
 2755 0008 0CB9     		cbnz	r4, .L234
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2756              		.loc 1 1704 0 is_stmt 0 discriminator 1
 2757 000a 2E4B     		ldr	r3, .L245
 2758 000c 1C68     		ldr	r4, [r3]
 2759              	.LVL231:
 2760              	.L234:
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2761              		.loc 1 1710 0 is_stmt 1 discriminator 4
 2762 000e 251D     		adds	r5, r4, #4
 2763 0010 2846     		mov	r0, r5
 2764 0012 FFF7FEFF 		bl	uxListRemove
 2765              	.LVL232:
 2766 0016 70B9     		cbnz	r0, .L235
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2767              		.loc 1 1712 0
 2768 0018 E26A     		ldr	r2, [r4, #44]
 2769 001a 02EB8201 		add	r1, r2, r2, lsl #2
 2770 001e 8B00     		lsls	r3, r1, #2
 2771 0020 2949     		ldr	r1, .L245+4
 2772 0022 CB58     		ldr	r3, [r1, r3]
 2773 0024 3BB9     		cbnz	r3, .L235
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2774              		.loc 1 1712 0 is_stmt 0 discriminator 1
 2775 0026 0123     		movs	r3, #1
 2776 0028 03FA02F2 		lsl	r2, r3, r2
 2777 002c 2749     		ldr	r1, .L245+8
 2778 002e 0B68     		ldr	r3, [r1]
 2779 0030 23EA0203 		bic	r3, r3, r2
 2780 0034 0B60     		str	r3, [r1]
 2781              	.L235:
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2782              		.loc 1 1720 0 is_stmt 1
 2783 0036 A36A     		ldr	r3, [r4, #40]
 2784 0038 1BB1     		cbz	r3, .L236
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2785              		.loc 1 1722 0
 2786 003a 04F11800 		add	r0, r4, #24
 2787 003e FFF7FEFF 		bl	uxListRemove
 2788              	.LVL233:
 2789              	.L236:
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2790              		.loc 1 1729 0
 2791 0042 2946     		mov	r1, r5
 2792 0044 2248     		ldr	r0, .L245+12
 2793 0046 FFF7FEFF 		bl	vListInsertEnd
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 149


 2794              	.LVL234:
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2795              		.loc 1 1733 0
 2796 004a 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 2797 004e DBB2     		uxtb	r3, r3
 2798 0050 012B     		cmp	r3, #1
 2799 0052 02D1     		bne	.L237
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2800              		.loc 1 1737 0
 2801 0054 0023     		movs	r3, #0
 2802 0056 84F85030 		strb	r3, [r4, #80]
 2803              	.L237:
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2804              		.loc 1 1742 0
 2805 005a FFF7FEFF 		bl	vPortExitCritical
 2806              	.LVL235:
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2807              		.loc 1 1744 0
 2808 005e 1D4B     		ldr	r3, .L245+16
 2809 0060 1B68     		ldr	r3, [r3]
 2810 0062 2BB1     		cbz	r3, .L238
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2811              		.loc 1 1748 0
 2812 0064 FFF7FEFF 		bl	vPortEnterCritical
 2813              	.LVL236:
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2814              		.loc 1 1750 0
 2815 0068 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2816              	.LVL237:
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2817              		.loc 1 1752 0
 2818 006c FFF7FEFF 		bl	vPortExitCritical
 2819              	.LVL238:
 2820              	.L238:
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2821              		.loc 1 1759 0
 2822 0070 144B     		ldr	r3, .L245
 2823 0072 1B68     		ldr	r3, [r3]
 2824 0074 9C42     		cmp	r4, r3
 2825 0076 23D1     		bne	.L233
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2826              		.loc 1 1761 0
 2827 0078 164B     		ldr	r3, .L245+16
 2828 007a 1B68     		ldr	r3, [r3]
 2829 007c A3B1     		cbz	r3, .L240
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2830              		.loc 1 1764 0
 2831 007e 164B     		ldr	r3, .L245+20
 2832 0080 1B68     		ldr	r3, [r3]
 2833 0082 43B1     		cbz	r3, .L241
 2834              	.LBB162:
 2835              	.LBB163:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2836              		.loc 2 195 0
 2837              		.syntax unified
 2838              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2839 0084 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 150


 2840 0088 83F31188 		msr basepri, r3											
 2841 008c BFF36F8F 		isb														
 2842 0090 BFF34F8F 		dsb														
 2843              	
 2844              	@ 0 "" 2
 2845              	.LVL239:
 2846              		.thumb
 2847              		.syntax unified
 2848              	.L242:
 2849 0094 FEE7     		b	.L242
 2850              	.L241:
 2851              	.LBE163:
 2852              	.LBE162:
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2853              		.loc 1 1765 0
 2854 0096 4FF08052 		mov	r2, #268435456
 2855 009a 104B     		ldr	r3, .L245+24
 2856 009c 1A60     		str	r2, [r3]
 2857              		.syntax unified
 2858              	@ 1765 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2859 009e BFF34F8F 		dsb
 2860              	@ 0 "" 2
 2861              	@ 1765 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2862 00a2 BFF36F8F 		isb
 2863              	@ 0 "" 2
 2864              		.thumb
 2865              		.syntax unified
 2866 00a6 38BD     		pop	{r3, r4, r5, pc}
 2867              	.LVL240:
 2868              	.L240:
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2869              		.loc 1 1772 0
 2870 00a8 094B     		ldr	r3, .L245+12
 2871 00aa 1A68     		ldr	r2, [r3]
 2872 00ac 0C4B     		ldr	r3, .L245+28
 2873 00ae 1B68     		ldr	r3, [r3]
 2874 00b0 9A42     		cmp	r2, r3
 2875 00b2 03D1     		bne	.L243
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2876              		.loc 1 1778 0
 2877 00b4 0022     		movs	r2, #0
 2878 00b6 034B     		ldr	r3, .L245
 2879 00b8 1A60     		str	r2, [r3]
 2880 00ba 38BD     		pop	{r3, r4, r5, pc}
 2881              	.LVL241:
 2882              	.L243:
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2883              		.loc 1 1782 0
 2884 00bc FFF7FEFF 		bl	vTaskSwitchContext
 2885              	.LVL242:
 2886              	.L233:
 2887 00c0 38BD     		pop	{r3, r4, r5, pc}
 2888              	.LVL243:
 2889              	.L246:
 2890 00c2 00BF     		.align	2
 2891              	.L245:
 2892 00c4 00000000 		.word	.LANCHOR10
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 151


 2893 00c8 00000000 		.word	.LANCHOR4
 2894 00cc 00000000 		.word	.LANCHOR13
 2895 00d0 00000000 		.word	.LANCHOR0
 2896 00d4 00000000 		.word	.LANCHOR11
 2897 00d8 00000000 		.word	.LANCHOR16
 2898 00dc 04ED00E0 		.word	-536810236
 2899 00e0 00000000 		.word	.LANCHOR9
 2900              		.cfi_endproc
 2901              	.LFE14:
 2903              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2904              		.align	2
 2905              		.global	vTaskPlaceOnEventList
 2906              		.thumb
 2907              		.thumb_func
 2909              	vTaskPlaceOnEventList:
 2910              	.LFB28:
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2911              		.loc 1 3021 0
 2912              		.cfi_startproc
 2913              		@ args = 0, pretend = 0, frame = 0
 2914              		@ frame_needed = 0, uses_anonymous_args = 0
 2915              	.LVL244:
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2916              		.loc 1 3022 0
 2917 0000 40B9     		cbnz	r0, .L248
 2918              	.LBB164:
 2919              	.LBB165:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2920              		.loc 2 195 0
 2921              		.syntax unified
 2922              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2923 0002 4FF05003 			mov r3, #80												
 2924 0006 83F31188 		msr basepri, r3											
 2925 000a BFF36F8F 		isb														
 2926 000e BFF34F8F 		dsb														
 2927              	
 2928              	@ 0 "" 2
 2929              	.LVL245:
 2930              		.thumb
 2931              		.syntax unified
 2932              	.L249:
 2933 0012 FEE7     		b	.L249
 2934              	.L248:
 2935              	.LBE165:
 2936              	.LBE164:
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2937              		.loc 1 3021 0
 2938 0014 10B5     		push	{r4, lr}
 2939              	.LCFI30:
 2940              		.cfi_def_cfa_offset 8
 2941              		.cfi_offset 4, -8
 2942              		.cfi_offset 14, -4
 2943 0016 0C46     		mov	r4, r1
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2944              		.loc 1 3031 0
 2945 0018 044B     		ldr	r3, .L251
 2946 001a 1968     		ldr	r1, [r3]
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 152


 2947              	.LVL246:
 2948 001c 1831     		adds	r1, r1, #24
 2949 001e FFF7FEFF 		bl	vListInsert
 2950              	.LVL247:
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2951              		.loc 1 3033 0
 2952 0022 0121     		movs	r1, #1
 2953 0024 2046     		mov	r0, r4
 2954 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2955              	.LVL248:
 2956 002a 10BD     		pop	{r4, pc}
 2957              	.LVL249:
 2958              	.L252:
 2959              		.align	2
 2960              	.L251:
 2961 002c 00000000 		.word	.LANCHOR10
 2962              		.cfi_endproc
 2963              	.LFE28:
 2965              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2966              		.align	2
 2967              		.global	vTaskPlaceOnUnorderedEventList
 2968              		.thumb
 2969              		.thumb_func
 2971              	vTaskPlaceOnUnorderedEventList:
 2972              	.LFB29:
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2973              		.loc 1 3038 0
 2974              		.cfi_startproc
 2975              		@ args = 0, pretend = 0, frame = 0
 2976              		@ frame_needed = 0, uses_anonymous_args = 0
 2977              	.LVL250:
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2978              		.loc 1 3039 0
 2979 0000 40B9     		cbnz	r0, .L254
 2980              	.LBB166:
 2981              	.LBB167:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2982              		.loc 2 195 0
 2983              		.syntax unified
 2984              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2985 0002 4FF05003 			mov r3, #80												
 2986 0006 83F31188 		msr basepri, r3											
 2987 000a BFF36F8F 		isb														
 2988 000e BFF34F8F 		dsb														
 2989              	
 2990              	@ 0 "" 2
 2991              	.LVL251:
 2992              		.thumb
 2993              		.syntax unified
 2994              	.L255:
 2995 0012 FEE7     		b	.L255
 2996              	.L254:
 2997 0014 0346     		mov	r3, r0
 2998              	.LBE167:
 2999              	.LBE166:
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3000              		.loc 1 3043 0
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 153


 3001 0016 0F48     		ldr	r0, .L259
 3002              	.LVL252:
 3003 0018 0068     		ldr	r0, [r0]
 3004 001a 40B9     		cbnz	r0, .L256
 3005              	.LBB168:
 3006              	.LBB169:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3007              		.loc 2 195 0
 3008              		.syntax unified
 3009              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3010 001c 4FF05003 			mov r3, #80												
 3011 0020 83F31188 		msr basepri, r3											
 3012 0024 BFF36F8F 		isb														
 3013 0028 BFF34F8F 		dsb														
 3014              	
 3015              	@ 0 "" 2
 3016              	.LVL253:
 3017              		.thumb
 3018              		.syntax unified
 3019              	.L257:
 3020 002c FEE7     		b	.L257
 3021              	.LVL254:
 3022              	.L256:
 3023              	.LBE169:
 3024              	.LBE168:
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3025              		.loc 1 3038 0
 3026 002e 10B5     		push	{r4, lr}
 3027              	.LCFI31:
 3028              		.cfi_def_cfa_offset 8
 3029              		.cfi_offset 4, -8
 3030              		.cfi_offset 14, -4
 3031 0030 1846     		mov	r0, r3
 3032 0032 1446     		mov	r4, r2
 3033 0034 0B46     		mov	r3, r1
 3034              	.LVL255:
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3035              		.loc 1 3048 0
 3036 0036 084A     		ldr	r2, .L259+4
 3037              	.LVL256:
 3038 0038 1168     		ldr	r1, [r2]
 3039              	.LVL257:
 3040 003a 43F00043 		orr	r3, r3, #-2147483648
 3041              	.LVL258:
 3042 003e 8B61     		str	r3, [r1, #24]
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3043              		.loc 1 3055 0
 3044 0040 1168     		ldr	r1, [r2]
 3045 0042 1831     		adds	r1, r1, #24
 3046 0044 FFF7FEFF 		bl	vListInsertEnd
 3047              	.LVL259:
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3048              		.loc 1 3057 0
 3049 0048 0121     		movs	r1, #1
 3050 004a 2046     		mov	r0, r4
 3051 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3052              	.LVL260:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 154


 3053 0050 10BD     		pop	{r4, pc}
 3054              	.LVL261:
 3055              	.L260:
 3056 0052 00BF     		.align	2
 3057              	.L259:
 3058 0054 00000000 		.word	.LANCHOR16
 3059 0058 00000000 		.word	.LANCHOR10
 3060              		.cfi_endproc
 3061              	.LFE29:
 3063              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3064              		.align	2
 3065              		.global	xTaskRemoveFromEventList
 3066              		.thumb
 3067              		.thumb_func
 3069              	xTaskRemoveFromEventList:
 3070              	.LFB30:
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3071              		.loc 1 3095 0
 3072              		.cfi_startproc
 3073              		@ args = 0, pretend = 0, frame = 0
 3074              		@ frame_needed = 0, uses_anonymous_args = 0
 3075              	.LVL262:
 3076 0000 38B5     		push	{r3, r4, r5, lr}
 3077              	.LCFI32:
 3078              		.cfi_def_cfa_offset 16
 3079              		.cfi_offset 3, -16
 3080              		.cfi_offset 4, -12
 3081              		.cfi_offset 5, -8
 3082              		.cfi_offset 14, -4
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3083              		.loc 1 3112 0
 3084 0002 C368     		ldr	r3, [r0, #12]
 3085 0004 DC68     		ldr	r4, [r3, #12]
 3086              	.LVL263:
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3087              		.loc 1 3113 0
 3088 0006 44B9     		cbnz	r4, .L262
 3089              	.LBB170:
 3090              	.LBB171:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3091              		.loc 2 195 0
 3092              		.syntax unified
 3093              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3094 0008 4FF05003 			mov r3, #80												
 3095 000c 83F31188 		msr basepri, r3											
 3096 0010 BFF36F8F 		isb														
 3097 0014 BFF34F8F 		dsb														
 3098              	
 3099              	@ 0 "" 2
 3100              	.LVL264:
 3101              		.thumb
 3102              		.syntax unified
 3103              	.L263:
 3104 0018 FEE7     		b	.L263
 3105              	.L262:
 3106              	.LBE171:
 3107              	.LBE170:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 155


3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3108              		.loc 1 3114 0
 3109 001a 04F11805 		add	r5, r4, #24
 3110 001e 2846     		mov	r0, r5
 3111              	.LVL265:
 3112 0020 FFF7FEFF 		bl	uxListRemove
 3113              	.LVL266:
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3114              		.loc 1 3116 0
 3115 0024 134B     		ldr	r3, .L269
 3116 0026 1B68     		ldr	r3, [r3]
 3117 0028 A3B9     		cbnz	r3, .L264
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3118              		.loc 1 3118 0
 3119 002a 251D     		adds	r5, r4, #4
 3120 002c 2846     		mov	r0, r5
 3121 002e FFF7FEFF 		bl	uxListRemove
 3122              	.LVL267:
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3123              		.loc 1 3119 0
 3124 0032 E36A     		ldr	r3, [r4, #44]
 3125 0034 0122     		movs	r2, #1
 3126 0036 02FA03F1 		lsl	r1, r2, r3
 3127 003a 0F48     		ldr	r0, .L269+4
 3128 003c 0268     		ldr	r2, [r0]
 3129 003e 0A43     		orrs	r2, r2, r1
 3130 0040 0260     		str	r2, [r0]
 3131 0042 03EB8303 		add	r3, r3, r3, lsl #2
 3132 0046 9A00     		lsls	r2, r3, #2
 3133 0048 2946     		mov	r1, r5
 3134 004a 0C48     		ldr	r0, .L269+8
 3135 004c 1044     		add	r0, r0, r2
 3136 004e FFF7FEFF 		bl	vListInsertEnd
 3137              	.LVL268:
 3138 0052 03E0     		b	.L265
 3139              	.L264:
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3140              		.loc 1 3139 0
 3141 0054 2946     		mov	r1, r5
 3142 0056 0A48     		ldr	r0, .L269+12
 3143 0058 FFF7FEFF 		bl	vListInsertEnd
 3144              	.LVL269:
 3145              	.L265:
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3146              		.loc 1 3142 0
 3147 005c E26A     		ldr	r2, [r4, #44]
 3148 005e 094B     		ldr	r3, .L269+16
 3149 0060 1B68     		ldr	r3, [r3]
 3150 0062 DB6A     		ldr	r3, [r3, #44]
 3151 0064 9A42     		cmp	r2, r3
 3152 0066 03D9     		bls	.L267
 3153              	.LVL270:
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3154              		.loc 1 3151 0
 3155 0068 0120     		movs	r0, #1
 3156 006a 074B     		ldr	r3, .L269+20
 3157 006c 1860     		str	r0, [r3]
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 156


 3158 006e 38BD     		pop	{r3, r4, r5, pc}
 3159              	.LVL271:
 3160              	.L267:
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3161              		.loc 1 3155 0
 3162 0070 0020     		movs	r0, #0
 3163              	.LVL272:
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3164              		.loc 1 3159 0
 3165 0072 38BD     		pop	{r3, r4, r5, pc}
 3166              	.LVL273:
 3167              	.L270:
 3168              		.align	2
 3169              	.L269:
 3170 0074 00000000 		.word	.LANCHOR16
 3171 0078 00000000 		.word	.LANCHOR13
 3172 007c 00000000 		.word	.LANCHOR4
 3173 0080 00000000 		.word	.LANCHOR1
 3174 0084 00000000 		.word	.LANCHOR10
 3175 0088 00000000 		.word	.LANCHOR19
 3176              		.cfi_endproc
 3177              	.LFE30:
 3179              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3180              		.align	2
 3181              		.global	vTaskRemoveFromUnorderedEventList
 3182              		.thumb
 3183              		.thumb_func
 3185              	vTaskRemoveFromUnorderedEventList:
 3186              	.LFB31:
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3187              		.loc 1 3163 0
 3188              		.cfi_startproc
 3189              		@ args = 0, pretend = 0, frame = 0
 3190              		@ frame_needed = 0, uses_anonymous_args = 0
 3191              	.LVL274:
 3192 0000 38B5     		push	{r3, r4, r5, lr}
 3193              	.LCFI33:
 3194              		.cfi_def_cfa_offset 16
 3195              		.cfi_offset 3, -16
 3196              		.cfi_offset 4, -12
 3197              		.cfi_offset 5, -8
 3198              		.cfi_offset 14, -4
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3199              		.loc 1 3168 0
 3200 0002 1D4B     		ldr	r3, .L278
 3201 0004 1B68     		ldr	r3, [r3]
 3202 0006 43B9     		cbnz	r3, .L272
 3203              	.LBB172:
 3204              	.LBB173:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3205              		.loc 2 195 0
 3206              		.syntax unified
 3207              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3208 0008 4FF05003 			mov r3, #80												
 3209 000c 83F31188 		msr basepri, r3											
 3210 0010 BFF36F8F 		isb														
 3211 0014 BFF34F8F 		dsb														
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 157


 3212              	
 3213              	@ 0 "" 2
 3214              	.LVL275:
 3215              		.thumb
 3216              		.syntax unified
 3217              	.L273:
 3218 0018 FEE7     		b	.L273
 3219              	.L272:
 3220              	.LBE173:
 3221              	.LBE172:
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3222              		.loc 1 3171 0
 3223 001a 41F00043 		orr	r3, r1, #-2147483648
 3224 001e 0360     		str	r3, [r0]
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3225              		.loc 1 3175 0
 3226 0020 C468     		ldr	r4, [r0, #12]
 3227              	.LVL276:
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3228              		.loc 1 3176 0
 3229 0022 44B9     		cbnz	r4, .L274
 3230              	.LBB174:
 3231              	.LBB175:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3232              		.loc 2 195 0
 3233              		.syntax unified
 3234              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3235 0024 4FF05003 			mov r3, #80												
 3236 0028 83F31188 		msr basepri, r3											
 3237 002c BFF36F8F 		isb														
 3238 0030 BFF34F8F 		dsb														
 3239              	
 3240              	@ 0 "" 2
 3241              	.LVL277:
 3242              		.thumb
 3243              		.syntax unified
 3244              	.L275:
 3245 0034 FEE7     		b	.L275
 3246              	.L274:
 3247              	.LBE175:
 3248              	.LBE174:
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3249              		.loc 1 3177 0
 3250 0036 FFF7FEFF 		bl	uxListRemove
 3251              	.LVL278:
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3252              		.loc 1 3182 0
 3253 003a 251D     		adds	r5, r4, #4
 3254 003c 2846     		mov	r0, r5
 3255 003e FFF7FEFF 		bl	uxListRemove
 3256              	.LVL279:
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3257              		.loc 1 3183 0
 3258 0042 E36A     		ldr	r3, [r4, #44]
 3259 0044 0122     		movs	r2, #1
 3260 0046 02FA03F1 		lsl	r1, r2, r3
 3261 004a 0C48     		ldr	r0, .L278+4
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 158


 3262 004c 0268     		ldr	r2, [r0]
 3263 004e 0A43     		orrs	r2, r2, r1
 3264 0050 0260     		str	r2, [r0]
 3265 0052 03EB8303 		add	r3, r3, r3, lsl #2
 3266 0056 9A00     		lsls	r2, r3, #2
 3267 0058 2946     		mov	r1, r5
 3268 005a 0948     		ldr	r0, .L278+8
 3269 005c 1044     		add	r0, r0, r2
 3270 005e FFF7FEFF 		bl	vListInsertEnd
 3271              	.LVL280:
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3272              		.loc 1 3185 0
 3273 0062 E26A     		ldr	r2, [r4, #44]
 3274 0064 074B     		ldr	r3, .L278+12
 3275 0066 1B68     		ldr	r3, [r3]
 3276 0068 DB6A     		ldr	r3, [r3, #44]
 3277 006a 9A42     		cmp	r2, r3
 3278 006c 02D9     		bls	.L271
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3279              		.loc 1 3191 0
 3280 006e 0122     		movs	r2, #1
 3281 0070 054B     		ldr	r3, .L278+16
 3282 0072 1A60     		str	r2, [r3]
 3283              	.L271:
 3284 0074 38BD     		pop	{r3, r4, r5, pc}
 3285              	.LVL281:
 3286              	.L279:
 3287 0076 00BF     		.align	2
 3288              	.L278:
 3289 0078 00000000 		.word	.LANCHOR16
 3290 007c 00000000 		.word	.LANCHOR13
 3291 0080 00000000 		.word	.LANCHOR4
 3292 0084 00000000 		.word	.LANCHOR10
 3293 0088 00000000 		.word	.LANCHOR19
 3294              		.cfi_endproc
 3295              	.LFE31:
 3297              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3298              		.align	2
 3299              		.global	vTaskSetTimeOutState
 3300              		.thumb
 3301              		.thumb_func
 3303              	vTaskSetTimeOutState:
 3304              	.LFB32:
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3305              		.loc 1 3197 0
 3306              		.cfi_startproc
 3307              		@ args = 0, pretend = 0, frame = 0
 3308              		@ frame_needed = 0, uses_anonymous_args = 0
 3309              	.LVL282:
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3310              		.loc 1 3198 0
 3311 0000 40B9     		cbnz	r0, .L281
 3312              	.LBB176:
 3313              	.LBB177:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3314              		.loc 2 195 0
 3315              		.syntax unified
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 159


 3316              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3317 0002 4FF05003 			mov r3, #80												
 3318 0006 83F31188 		msr basepri, r3											
 3319 000a BFF36F8F 		isb														
 3320 000e BFF34F8F 		dsb														
 3321              	
 3322              	@ 0 "" 2
 3323              	.LVL283:
 3324              		.thumb
 3325              		.syntax unified
 3326              	.L282:
 3327 0012 FEE7     		b	.L282
 3328              	.L281:
 3329              	.LBE177:
 3330              	.LBE176:
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3331              		.loc 1 3197 0
 3332 0014 10B5     		push	{r4, lr}
 3333              	.LCFI34:
 3334              		.cfi_def_cfa_offset 8
 3335              		.cfi_offset 4, -8
 3336              		.cfi_offset 14, -4
 3337 0016 0446     		mov	r4, r0
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3338              		.loc 1 3199 0
 3339 0018 FFF7FEFF 		bl	vPortEnterCritical
 3340              	.LVL284:
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3341              		.loc 1 3201 0
 3342 001c 044B     		ldr	r3, .L284
 3343 001e 1B68     		ldr	r3, [r3]
 3344 0020 2360     		str	r3, [r4]
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3345              		.loc 1 3202 0
 3346 0022 044B     		ldr	r3, .L284+4
 3347 0024 1B68     		ldr	r3, [r3]
 3348 0026 6360     		str	r3, [r4, #4]
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3349              		.loc 1 3204 0
 3350 0028 FFF7FEFF 		bl	vPortExitCritical
 3351              	.LVL285:
 3352 002c 10BD     		pop	{r4, pc}
 3353              	.LVL286:
 3354              	.L285:
 3355 002e 00BF     		.align	2
 3356              	.L284:
 3357 0030 00000000 		.word	.LANCHOR17
 3358 0034 00000000 		.word	.LANCHOR15
 3359              		.cfi_endproc
 3360              	.LFE32:
 3362              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3363              		.align	2
 3364              		.global	vTaskInternalSetTimeOutState
 3365              		.thumb
 3366              		.thumb_func
 3368              	vTaskInternalSetTimeOutState:
 3369              	.LFB33:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 160


3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3370              		.loc 1 3209 0
 3371              		.cfi_startproc
 3372              		@ args = 0, pretend = 0, frame = 0
 3373              		@ frame_needed = 0, uses_anonymous_args = 0
 3374              		@ link register save eliminated.
 3375              	.LVL287:
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3376              		.loc 1 3211 0
 3377 0000 034B     		ldr	r3, .L287
 3378 0002 1B68     		ldr	r3, [r3]
 3379 0004 0360     		str	r3, [r0]
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3380              		.loc 1 3212 0
 3381 0006 034B     		ldr	r3, .L287+4
 3382 0008 1B68     		ldr	r3, [r3]
 3383 000a 4360     		str	r3, [r0, #4]
 3384 000c 7047     		bx	lr
 3385              	.L288:
 3386 000e 00BF     		.align	2
 3387              	.L287:
 3388 0010 00000000 		.word	.LANCHOR17
 3389 0014 00000000 		.word	.LANCHOR15
 3390              		.cfi_endproc
 3391              	.LFE33:
 3393              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3394              		.align	2
 3395              		.global	xTaskCheckForTimeOut
 3396              		.thumb
 3397              		.thumb_func
 3399              	xTaskCheckForTimeOut:
 3400              	.LFB34:
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3401              		.loc 1 3217 0
 3402              		.cfi_startproc
 3403              		@ args = 0, pretend = 0, frame = 0
 3404              		@ frame_needed = 0, uses_anonymous_args = 0
 3405              	.LVL288:
 3406 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3407              	.LCFI35:
 3408              		.cfi_def_cfa_offset 24
 3409              		.cfi_offset 3, -24
 3410              		.cfi_offset 4, -20
 3411              		.cfi_offset 5, -16
 3412              		.cfi_offset 6, -12
 3413              		.cfi_offset 7, -8
 3414              		.cfi_offset 14, -4
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3415              		.loc 1 3220 0
 3416 0002 40B9     		cbnz	r0, .L290
 3417              	.LBB178:
 3418              	.LBB179:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3419              		.loc 2 195 0
 3420              		.syntax unified
 3421              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3422 0004 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 161


 3423 0008 83F31188 		msr basepri, r3											
 3424 000c BFF36F8F 		isb														
 3425 0010 BFF34F8F 		dsb														
 3426              	
 3427              	@ 0 "" 2
 3428              	.LVL289:
 3429              		.thumb
 3430              		.syntax unified
 3431              	.L291:
 3432 0014 FEE7     		b	.L291
 3433              	.L290:
 3434 0016 0546     		mov	r5, r0
 3435              	.LBE179:
 3436              	.LBE178:
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3437              		.loc 1 3221 0
 3438 0018 41B9     		cbnz	r1, .L292
 3439              	.LBB180:
 3440              	.LBB181:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3441              		.loc 2 195 0
 3442              		.syntax unified
 3443              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3444 001a 4FF05003 			mov r3, #80												
 3445 001e 83F31188 		msr basepri, r3											
 3446 0022 BFF36F8F 		isb														
 3447 0026 BFF34F8F 		dsb														
 3448              	
 3449              	@ 0 "" 2
 3450              	.LVL290:
 3451              		.thumb
 3452              		.syntax unified
 3453              	.L293:
 3454 002a FEE7     		b	.L293
 3455              	.L292:
 3456 002c 0C46     		mov	r4, r1
 3457              	.LBE181:
 3458              	.LBE180:
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3459              		.loc 1 3223 0
 3460 002e FFF7FEFF 		bl	vPortEnterCritical
 3461              	.LVL291:
 3462              	.LBB182:
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3463              		.loc 1 3226 0
 3464 0032 114B     		ldr	r3, .L300
 3465 0034 1868     		ldr	r0, [r3]
 3466              	.LVL292:
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3467              		.loc 1 3227 0
 3468 0036 6968     		ldr	r1, [r5, #4]
 3469 0038 421A     		subs	r2, r0, r1
 3470              	.LVL293:
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3471              		.loc 1 3241 0
 3472 003a 2368     		ldr	r3, [r4]
 3473 003c B3F1FF3F 		cmp	r3, #-1
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 162


 3474 0040 13D0     		beq	.L297
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3475              		.loc 1 3251 0
 3476 0042 2F68     		ldr	r7, [r5]
 3477 0044 0D4E     		ldr	r6, .L300+4
 3478 0046 3668     		ldr	r6, [r6]
 3479 0048 B742     		cmp	r7, r6
 3480 004a 01D0     		beq	.L295
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3481              		.loc 1 3251 0 is_stmt 0 discriminator 1
 3482 004c 8842     		cmp	r0, r1
 3483 004e 0ED2     		bcs	.L298
 3484              	.L295:
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3485              		.loc 1 3260 0 is_stmt 1
 3486 0050 9A42     		cmp	r2, r3
 3487 0052 06D2     		bcs	.L296
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3488              		.loc 1 3263 0
 3489 0054 9B1A     		subs	r3, r3, r2
 3490 0056 2360     		str	r3, [r4]
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3491              		.loc 1 3264 0
 3492 0058 2846     		mov	r0, r5
 3493              	.LVL294:
 3494 005a FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3495              	.LVL295:
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3496              		.loc 1 3265 0
 3497 005e 0024     		movs	r4, #0
 3498              	.LVL296:
 3499 0060 06E0     		b	.L294
 3500              	.LVL297:
 3501              	.L296:
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3502              		.loc 1 3269 0
 3503 0062 0023     		movs	r3, #0
 3504 0064 2360     		str	r3, [r4]
 3505              	.LVL298:
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3506              		.loc 1 3270 0
 3507 0066 0124     		movs	r4, #1
 3508              	.LVL299:
 3509 0068 02E0     		b	.L294
 3510              	.LVL300:
 3511              	.L297:
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3512              		.loc 1 3246 0
 3513 006a 0024     		movs	r4, #0
 3514              	.LVL301:
 3515 006c 00E0     		b	.L294
 3516              	.LVL302:
 3517              	.L298:
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3518              		.loc 1 3258 0
 3519 006e 0124     		movs	r4, #1
 3520              	.LVL303:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 163


 3521              	.L294:
 3522              	.LBE182:
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3523              		.loc 1 3273 0
 3524 0070 FFF7FEFF 		bl	vPortExitCritical
 3525              	.LVL304:
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3526              		.loc 1 3276 0
 3527 0074 2046     		mov	r0, r4
 3528 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3529              	.LVL305:
 3530              	.L301:
 3531              		.align	2
 3532              	.L300:
 3533 0078 00000000 		.word	.LANCHOR15
 3534 007c 00000000 		.word	.LANCHOR17
 3535              		.cfi_endproc
 3536              	.LFE34:
 3538              		.section	.text.vTaskMissedYield,"ax",%progbits
 3539              		.align	2
 3540              		.global	vTaskMissedYield
 3541              		.thumb
 3542              		.thumb_func
 3544              	vTaskMissedYield:
 3545              	.LFB35:
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3546              		.loc 1 3280 0
 3547              		.cfi_startproc
 3548              		@ args = 0, pretend = 0, frame = 0
 3549              		@ frame_needed = 0, uses_anonymous_args = 0
 3550              		@ link register save eliminated.
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3551              		.loc 1 3281 0
 3552 0000 0122     		movs	r2, #1
 3553 0002 014B     		ldr	r3, .L303
 3554 0004 1A60     		str	r2, [r3]
 3555 0006 7047     		bx	lr
 3556              	.L304:
 3557              		.align	2
 3558              	.L303:
 3559 0008 00000000 		.word	.LANCHOR19
 3560              		.cfi_endproc
 3561              	.LFE35:
 3563              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3564              		.align	2
 3565              		.global	xTaskGetCurrentTaskHandle
 3566              		.thumb
 3567              		.thumb_func
 3569              	xTaskGetCurrentTaskHandle:
 3570              	.LFB41:
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 3571              		.loc 1 3907 0
 3572              		.cfi_startproc
 3573              		@ args = 0, pretend = 0, frame = 0
 3574              		@ frame_needed = 0, uses_anonymous_args = 0
 3575              		@ link register save eliminated.
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 164


 3576              		.loc 1 3913 0
 3577 0000 014B     		ldr	r3, .L306
 3578 0002 1868     		ldr	r0, [r3]
 3579              	.LVL306:
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3580              		.loc 1 3916 0
 3581 0004 7047     		bx	lr
 3582              	.L307:
 3583 0006 00BF     		.align	2
 3584              	.L306:
 3585 0008 00000000 		.word	.LANCHOR10
 3586              		.cfi_endproc
 3587              	.LFE41:
 3589              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3590              		.align	2
 3591              		.global	xTaskGetSchedulerState
 3592              		.thumb
 3593              		.thumb_func
 3595              	xTaskGetSchedulerState:
 3596              	.LFB42:
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 3597              		.loc 1 3924 0
 3598              		.cfi_startproc
 3599              		@ args = 0, pretend = 0, frame = 0
 3600              		@ frame_needed = 0, uses_anonymous_args = 0
 3601              		@ link register save eliminated.
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3602              		.loc 1 3927 0
 3603 0000 054B     		ldr	r3, .L312
 3604 0002 1B68     		ldr	r3, [r3]
 3605 0004 23B1     		cbz	r3, .L310
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3606              		.loc 1 3933 0
 3607 0006 054B     		ldr	r3, .L312+4
 3608 0008 1B68     		ldr	r3, [r3]
 3609 000a 1BB9     		cbnz	r3, .L311
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3610              		.loc 1 3935 0
 3611 000c 0220     		movs	r0, #2
 3612 000e 7047     		bx	lr
 3613              	.L310:
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3614              		.loc 1 3929 0
 3615 0010 0120     		movs	r0, #1
 3616 0012 7047     		bx	lr
 3617              	.L311:
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3618              		.loc 1 3939 0
 3619 0014 0020     		movs	r0, #0
 3620              	.LVL307:
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3621              		.loc 1 3944 0
 3622 0016 7047     		bx	lr
 3623              	.L313:
 3624              		.align	2
 3625              	.L312:
 3626 0018 00000000 		.word	.LANCHOR11
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 165


 3627 001c 00000000 		.word	.LANCHOR16
 3628              		.cfi_endproc
 3629              	.LFE42:
 3631              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 3632              		.align	2
 3633              		.global	xTaskPriorityInherit
 3634              		.thumb
 3635              		.thumb_func
 3637              	xTaskPriorityInherit:
 3638              	.LFB43:
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3639              		.loc 1 3952 0
 3640              		.cfi_startproc
 3641              		@ args = 0, pretend = 0, frame = 0
 3642              		@ frame_needed = 0, uses_anonymous_args = 0
 3643              	.LVL308:
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3644              		.loc 1 3959 0
 3645 0000 0028     		cmp	r0, #0
 3646 0002 50D0     		beq	.L320
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 3647              		.loc 1 3952 0
 3648 0004 38B5     		push	{r3, r4, r5, lr}
 3649              	.LCFI36:
 3650              		.cfi_def_cfa_offset 16
 3651              		.cfi_offset 3, -16
 3652              		.cfi_offset 4, -12
 3653              		.cfi_offset 5, -8
 3654              		.cfi_offset 14, -4
 3655 0006 0346     		mov	r3, r0
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3656              		.loc 1 3964 0
 3657 0008 C26A     		ldr	r2, [r0, #44]
 3658 000a 2949     		ldr	r1, .L323
 3659 000c 0968     		ldr	r1, [r1]
 3660 000e C96A     		ldr	r1, [r1, #44]
 3661 0010 8A42     		cmp	r2, r1
 3662 0012 40D2     		bcs	.L316
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3663              		.loc 1 3969 0
 3664 0014 8169     		ldr	r1, [r0, #24]
 3665 0016 0029     		cmp	r1, #0
 3666 0018 05DB     		blt	.L317
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3667              		.loc 1 3971 0
 3668 001a 2549     		ldr	r1, .L323
 3669 001c 0968     		ldr	r1, [r1]
 3670 001e C96A     		ldr	r1, [r1, #44]
 3671 0020 C1F10701 		rsb	r1, r1, #7
 3672 0024 8161     		str	r1, [r0, #24]
 3673              	.L317:
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3674              		.loc 1 3980 0
 3675 0026 5869     		ldr	r0, [r3, #20]
 3676              	.LVL309:
 3677 0028 02EB8202 		add	r2, r2, r2, lsl #2
 3678 002c 9100     		lsls	r1, r2, #2
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 166


 3679 002e 214A     		ldr	r2, .L323+4
 3680 0030 1144     		add	r1, r1, r2
 3681 0032 8842     		cmp	r0, r1
 3682 0034 29D1     		bne	.L318
 3683 0036 1C46     		mov	r4, r3
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3684              		.loc 1 3982 0
 3685 0038 1D1D     		adds	r5, r3, #4
 3686 003a 2846     		mov	r0, r5
 3687 003c FFF7FEFF 		bl	uxListRemove
 3688              	.LVL310:
 3689 0040 70B9     		cbnz	r0, .L319
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3690              		.loc 1 3984 0
 3691 0042 E36A     		ldr	r3, [r4, #44]
 3692 0044 03EB8301 		add	r1, r3, r3, lsl #2
 3693 0048 8A00     		lsls	r2, r1, #2
 3694 004a 1A49     		ldr	r1, .L323+4
 3695 004c 8A58     		ldr	r2, [r1, r2]
 3696 004e 3AB9     		cbnz	r2, .L319
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3697              		.loc 1 3984 0 is_stmt 0 discriminator 1
 3698 0050 0122     		movs	r2, #1
 3699 0052 02FA03F3 		lsl	r3, r2, r3
 3700 0056 1849     		ldr	r1, .L323+8
 3701 0058 0A68     		ldr	r2, [r1]
 3702 005a 22EA0303 		bic	r3, r2, r3
 3703 005e 0B60     		str	r3, [r1]
 3704              	.L319:
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 3705              		.loc 1 3992 0 is_stmt 1
 3706 0060 134B     		ldr	r3, .L323
 3707 0062 1B68     		ldr	r3, [r3]
 3708 0064 DB6A     		ldr	r3, [r3, #44]
 3709 0066 E362     		str	r3, [r4, #44]
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3710              		.loc 1 3993 0
 3711 0068 0124     		movs	r4, #1
 3712              	.LVL311:
 3713 006a 04FA03F0 		lsl	r0, r4, r3
 3714 006e 1249     		ldr	r1, .L323+8
 3715 0070 0A68     		ldr	r2, [r1]
 3716 0072 0243     		orrs	r2, r2, r0
 3717 0074 0A60     		str	r2, [r1]
 3718 0076 03EB8303 		add	r3, r3, r3, lsl #2
 3719 007a 9A00     		lsls	r2, r3, #2
 3720 007c 2946     		mov	r1, r5
 3721 007e 0D48     		ldr	r0, .L323+4
 3722 0080 1044     		add	r0, r0, r2
 3723 0082 FFF7FEFF 		bl	vListInsertEnd
 3724              	.LVL312:
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3725              		.loc 1 4004 0
 3726 0086 2046     		mov	r0, r4
 3727 0088 38BD     		pop	{r3, r4, r5, pc}
 3728              	.LVL313:
 3729              	.L318:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 167


3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3730              		.loc 1 3998 0
 3731 008a 094A     		ldr	r2, .L323
 3732 008c 1268     		ldr	r2, [r2]
 3733 008e D26A     		ldr	r2, [r2, #44]
 3734 0090 DA62     		str	r2, [r3, #44]
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3735              		.loc 1 4004 0
 3736 0092 0120     		movs	r0, #1
 3737 0094 38BD     		pop	{r3, r4, r5, pc}
 3738              	.LVL314:
 3739              	.L316:
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3740              		.loc 1 4008 0
 3741 0096 426C     		ldr	r2, [r0, #68]
 3742 0098 054B     		ldr	r3, .L323
 3743 009a 1B68     		ldr	r3, [r3]
 3744 009c DB6A     		ldr	r3, [r3, #44]
 3745 009e 9A42     		cmp	r2, r3
 3746 00a0 03D3     		bcc	.L321
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3747              		.loc 1 3954 0
 3748 00a2 0020     		movs	r0, #0
 3749              	.LVL315:
 3750 00a4 38BD     		pop	{r3, r4, r5, pc}
 3751              	.LVL316:
 3752              	.L320:
 3753              	.LCFI37:
 3754              		.cfi_def_cfa_offset 0
 3755              		.cfi_restore 3
 3756              		.cfi_restore 4
 3757              		.cfi_restore 5
 3758              		.cfi_restore 14
 3759 00a6 0020     		movs	r0, #0
 3760              	.LVL317:
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3761              		.loc 1 4031 0
 3762 00a8 7047     		bx	lr
 3763              	.LVL318:
 3764              	.L321:
 3765              	.LCFI38:
 3766              		.cfi_def_cfa_offset 16
 3767              		.cfi_offset 3, -16
 3768              		.cfi_offset 4, -12
 3769              		.cfi_offset 5, -8
 3770              		.cfi_offset 14, -4
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3771              		.loc 1 4017 0
 3772 00aa 0120     		movs	r0, #1
 3773              	.LVL319:
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3774              		.loc 1 4031 0
 3775 00ac 38BD     		pop	{r3, r4, r5, pc}
 3776              	.L324:
 3777 00ae 00BF     		.align	2
 3778              	.L323:
 3779 00b0 00000000 		.word	.LANCHOR10
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 168


 3780 00b4 00000000 		.word	.LANCHOR4
 3781 00b8 00000000 		.word	.LANCHOR13
 3782              		.cfi_endproc
 3783              	.LFE43:
 3785              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3786              		.align	2
 3787              		.global	xTaskPriorityDisinherit
 3788              		.thumb
 3789              		.thumb_func
 3791              	xTaskPriorityDisinherit:
 3792              	.LFB44:
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3793              		.loc 1 4039 0
 3794              		.cfi_startproc
 3795              		@ args = 0, pretend = 0, frame = 0
 3796              		@ frame_needed = 0, uses_anonymous_args = 0
 3797              	.LVL320:
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3798              		.loc 1 4043 0
 3799 0000 0028     		cmp	r0, #0
 3800 0002 4BD0     		beq	.L332
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3801              		.loc 1 4039 0
 3802 0004 38B5     		push	{r3, r4, r5, lr}
 3803              	.LCFI39:
 3804              		.cfi_def_cfa_offset 16
 3805              		.cfi_offset 3, -16
 3806              		.cfi_offset 4, -12
 3807              		.cfi_offset 5, -8
 3808              		.cfi_offset 14, -4
 3809 0006 0346     		mov	r3, r0
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 3810              		.loc 1 4049 0
 3811 0008 274A     		ldr	r2, .L336
 3812 000a 1268     		ldr	r2, [r2]
 3813 000c 9042     		cmp	r0, r2
 3814 000e 08D0     		beq	.L327
 3815              	.LBB183:
 3816              	.LBB184:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3817              		.loc 2 195 0
 3818              		.syntax unified
 3819              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3820 0010 4FF05003 			mov r3, #80												
 3821 0014 83F31188 		msr basepri, r3											
 3822 0018 BFF36F8F 		isb														
 3823 001c BFF34F8F 		dsb														
 3824              	
 3825              	@ 0 "" 2
 3826              	.LVL321:
 3827              		.thumb
 3828              		.syntax unified
 3829              	.L328:
 3830 0020 FEE7     		b	.L328
 3831              	.L327:
 3832              	.LBE184:
 3833              	.LBE183:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 169


4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3834              		.loc 1 4050 0
 3835 0022 826C     		ldr	r2, [r0, #72]
 3836 0024 42B9     		cbnz	r2, .L329
 3837              	.LBB185:
 3838              	.LBB186:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3839              		.loc 2 195 0
 3840              		.syntax unified
 3841              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3842 0026 4FF05003 			mov r3, #80												
 3843 002a 83F31188 		msr basepri, r3											
 3844 002e BFF36F8F 		isb														
 3845 0032 BFF34F8F 		dsb														
 3846              	
 3847              	@ 0 "" 2
 3848              	.LVL322:
 3849              		.thumb
 3850              		.syntax unified
 3851              	.L330:
 3852 0036 FEE7     		b	.L330
 3853              	.L329:
 3854              	.LBE186:
 3855              	.LBE185:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3856              		.loc 1 4051 0
 3857 0038 013A     		subs	r2, r2, #1
 3858 003a 8264     		str	r2, [r0, #72]
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3859              		.loc 1 4055 0
 3860 003c C06A     		ldr	r0, [r0, #44]
 3861              	.LVL323:
 3862 003e 596C     		ldr	r1, [r3, #68]
 3863 0040 8842     		cmp	r0, r1
 3864 0042 2DD0     		beq	.L333
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3865              		.loc 1 4058 0
 3866 0044 72BB     		cbnz	r2, .L334
 3867 0046 1C46     		mov	r4, r3
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3868              		.loc 1 4065 0
 3869 0048 1D1D     		adds	r5, r3, #4
 3870 004a 2846     		mov	r0, r5
 3871 004c FFF7FEFF 		bl	uxListRemove
 3872              	.LVL324:
 3873 0050 70B9     		cbnz	r0, .L331
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3874              		.loc 1 4067 0
 3875 0052 E26A     		ldr	r2, [r4, #44]
 3876 0054 02EB8201 		add	r1, r2, r2, lsl #2
 3877 0058 8B00     		lsls	r3, r1, #2
 3878 005a 1449     		ldr	r1, .L336+4
 3879 005c CB58     		ldr	r3, [r1, r3]
 3880 005e 3BB9     		cbnz	r3, .L331
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3881              		.loc 1 4067 0 is_stmt 0 discriminator 1
 3882 0060 0123     		movs	r3, #1
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 170


 3883 0062 03FA02F2 		lsl	r2, r3, r2
 3884 0066 1249     		ldr	r1, .L336+8
 3885 0068 0B68     		ldr	r3, [r1]
 3886 006a 23EA0203 		bic	r3, r3, r2
 3887 006e 0B60     		str	r3, [r1]
 3888              	.L331:
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3889              		.loc 1 4077 0 is_stmt 1
 3890 0070 636C     		ldr	r3, [r4, #68]
 3891 0072 E362     		str	r3, [r4, #44]
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3892              		.loc 1 4082 0
 3893 0074 C3F10702 		rsb	r2, r3, #7
 3894 0078 A261     		str	r2, [r4, #24]
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3895              		.loc 1 4083 0
 3896 007a 0124     		movs	r4, #1
 3897              	.LVL325:
 3898 007c 04FA03F0 		lsl	r0, r4, r3
 3899 0080 0B49     		ldr	r1, .L336+8
 3900 0082 0A68     		ldr	r2, [r1]
 3901 0084 0243     		orrs	r2, r2, r0
 3902 0086 0A60     		str	r2, [r1]
 3903 0088 03EB8303 		add	r3, r3, r3, lsl #2
 3904 008c 9A00     		lsls	r2, r3, #2
 3905 008e 2946     		mov	r1, r5
 3906 0090 0648     		ldr	r0, .L336+4
 3907 0092 1044     		add	r0, r0, r2
 3908 0094 FFF7FEFF 		bl	vListInsertEnd
 3909              	.LVL326:
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3910              		.loc 1 4093 0
 3911 0098 2046     		mov	r0, r4
 3912 009a 38BD     		pop	{r3, r4, r5, pc}
 3913              	.LVL327:
 3914              	.L332:
 3915              	.LCFI40:
 3916              		.cfi_def_cfa_offset 0
 3917              		.cfi_restore 3
 3918              		.cfi_restore 4
 3919              		.cfi_restore 5
 3920              		.cfi_restore 14
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3921              		.loc 1 4041 0
 3922 009c 0020     		movs	r0, #0
 3923              	.LVL328:
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3924              		.loc 1 4111 0
 3925 009e 7047     		bx	lr
 3926              	.LVL329:
 3927              	.L333:
 3928              	.LCFI41:
 3929              		.cfi_def_cfa_offset 16
 3930              		.cfi_offset 3, -16
 3931              		.cfi_offset 4, -12
 3932              		.cfi_offset 5, -8
 3933              		.cfi_offset 14, -4
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 171


4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3934              		.loc 1 4041 0
 3935 00a0 0020     		movs	r0, #0
 3936 00a2 38BD     		pop	{r3, r4, r5, pc}
 3937              	.LVL330:
 3938              	.L334:
 3939 00a4 0020     		movs	r0, #0
 3940              	.LVL331:
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3941              		.loc 1 4111 0
 3942 00a6 38BD     		pop	{r3, r4, r5, pc}
 3943              	.LVL332:
 3944              	.L337:
 3945              		.align	2
 3946              	.L336:
 3947 00a8 00000000 		.word	.LANCHOR10
 3948 00ac 00000000 		.word	.LANCHOR4
 3949 00b0 00000000 		.word	.LANCHOR13
 3950              		.cfi_endproc
 3951              	.LFE44:
 3953              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 3954              		.align	2
 3955              		.global	vTaskPriorityDisinheritAfterTimeout
 3956              		.thumb
 3957              		.thumb_func
 3959              	vTaskPriorityDisinheritAfterTimeout:
 3960              	.LFB45:
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3961              		.loc 1 4119 0
 3962              		.cfi_startproc
 3963              		@ args = 0, pretend = 0, frame = 0
 3964              		@ frame_needed = 0, uses_anonymous_args = 0
 3965              	.LVL333:
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3966              		.loc 1 4124 0
 3967 0000 0028     		cmp	r0, #0
 3968 0002 57D0     		beq	.L348
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 3969              		.loc 1 4119 0
 3970 0004 38B5     		push	{r3, r4, r5, lr}
 3971              	.LCFI42:
 3972              		.cfi_def_cfa_offset 16
 3973              		.cfi_offset 3, -16
 3974              		.cfi_offset 4, -12
 3975              		.cfi_offset 5, -8
 3976              		.cfi_offset 14, -4
 3977 0006 0346     		mov	r3, r0
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3978              		.loc 1 4128 0
 3979 0008 806C     		ldr	r0, [r0, #72]
 3980              	.LVL334:
 3981 000a 40B9     		cbnz	r0, .L340
 3982              	.LBB187:
 3983              	.LBB188:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3984              		.loc 2 195 0
 3985              		.syntax unified
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 172


 3986              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3987 000c 4FF05003 			mov r3, #80												
 3988 0010 83F31188 		msr basepri, r3											
 3989 0014 BFF36F8F 		isb														
 3990 0018 BFF34F8F 		dsb														
 3991              	
 3992              	@ 0 "" 2
 3993              	.LVL335:
 3994              		.thumb
 3995              		.syntax unified
 3996              	.L341:
 3997 001c FEE7     		b	.L341
 3998              	.LVL336:
 3999              	.L340:
 4000              	.LBE188:
 4001              	.LBE187:
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4002              		.loc 1 4134 0
 4003 001e 5A6C     		ldr	r2, [r3, #68]
 4004 0020 8A42     		cmp	r2, r1
 4005 0022 00D2     		bcs	.L342
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4006              		.loc 1 4136 0
 4007 0024 0A46     		mov	r2, r1
 4008              	.L342:
 4009              	.LVL337:
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4010              		.loc 1 4144 0
 4011 0026 D96A     		ldr	r1, [r3, #44]
 4012              	.LVL338:
 4013 0028 8A42     		cmp	r2, r1
 4014 002a 42D0     		beq	.L338
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4015              		.loc 1 4150 0
 4016 002c 0128     		cmp	r0, #1
 4017 002e 40D1     		bne	.L338
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4018              		.loc 1 4155 0
 4019 0030 2148     		ldr	r0, .L349
 4020 0032 0068     		ldr	r0, [r0]
 4021 0034 8342     		cmp	r3, r0
 4022 0036 08D1     		bne	.L343
 4023              	.LBB189:
 4024              	.LBB190:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4025              		.loc 2 195 0
 4026              		.syntax unified
 4027              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4028 0038 4FF05003 			mov r3, #80												
 4029 003c 83F31188 		msr basepri, r3											
 4030 0040 BFF36F8F 		isb														
 4031 0044 BFF34F8F 		dsb														
 4032              	
 4033              	@ 0 "" 2
 4034              	.LVL339:
 4035              		.thumb
 4036              		.syntax unified
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 173


 4037              	.L344:
 4038 0048 FEE7     		b	.L344
 4039              	.LVL340:
 4040              	.L343:
 4041              	.LBE190:
 4042              	.LBE189:
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4043              		.loc 1 4162 0
 4044 004a DA62     		str	r2, [r3, #44]
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4045              		.loc 1 4166 0
 4046 004c 9869     		ldr	r0, [r3, #24]
 4047 004e 0028     		cmp	r0, #0
 4048 0050 02DB     		blt	.L345
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4049              		.loc 1 4168 0
 4050 0052 C2F10702 		rsb	r2, r2, #7
 4051              	.LVL341:
 4052 0056 9A61     		str	r2, [r3, #24]
 4053              	.L345:
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4054              		.loc 1 4181 0
 4055 0058 5869     		ldr	r0, [r3, #20]
 4056 005a 01EB8101 		add	r1, r1, r1, lsl #2
 4057              	.LVL342:
 4058 005e 8A00     		lsls	r2, r1, #2
 4059 0060 1649     		ldr	r1, .L349+4
 4060 0062 0A44     		add	r2, r2, r1
 4061 0064 9042     		cmp	r0, r2
 4062 0066 24D1     		bne	.L338
 4063 0068 1C46     		mov	r4, r3
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4064              		.loc 1 4183 0
 4065 006a 1D1D     		adds	r5, r3, #4
 4066 006c 2846     		mov	r0, r5
 4067 006e FFF7FEFF 		bl	uxListRemove
 4068              	.LVL343:
 4069 0072 70B9     		cbnz	r0, .L346
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 4070              		.loc 1 4185 0
 4071 0074 E26A     		ldr	r2, [r4, #44]
 4072 0076 02EB8201 		add	r1, r2, r2, lsl #2
 4073 007a 8B00     		lsls	r3, r1, #2
 4074 007c 0F49     		ldr	r1, .L349+4
 4075 007e CB58     		ldr	r3, [r1, r3]
 4076 0080 3BB9     		cbnz	r3, .L346
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 4077              		.loc 1 4185 0 is_stmt 0 discriminator 1
 4078 0082 0123     		movs	r3, #1
 4079 0084 03FA02F2 		lsl	r2, r3, r2
 4080 0088 0D49     		ldr	r1, .L349+8
 4081 008a 0B68     		ldr	r3, [r1]
 4082 008c 23EA0203 		bic	r3, r3, r2
 4083 0090 0B60     		str	r3, [r1]
 4084              	.L346:
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4085              		.loc 1 4192 0 is_stmt 1
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 174


 4086 0092 E36A     		ldr	r3, [r4, #44]
 4087 0094 0122     		movs	r2, #1
 4088 0096 02FA03F1 		lsl	r1, r2, r3
 4089 009a 0948     		ldr	r0, .L349+8
 4090 009c 0268     		ldr	r2, [r0]
 4091 009e 0A43     		orrs	r2, r2, r1
 4092 00a0 0260     		str	r2, [r0]
 4093 00a2 03EB8303 		add	r3, r3, r3, lsl #2
 4094 00a6 9A00     		lsls	r2, r3, #2
 4095 00a8 2946     		mov	r1, r5
 4096 00aa 0448     		ldr	r0, .L349+4
 4097 00ac 1044     		add	r0, r0, r2
 4098 00ae FFF7FEFF 		bl	vListInsertEnd
 4099              	.LVL344:
 4100              	.L338:
 4101 00b2 38BD     		pop	{r3, r4, r5, pc}
 4102              	.LVL345:
 4103              	.L348:
 4104              	.LCFI43:
 4105              		.cfi_def_cfa_offset 0
 4106              		.cfi_restore 3
 4107              		.cfi_restore 4
 4108              		.cfi_restore 5
 4109              		.cfi_restore 14
 4110 00b4 7047     		bx	lr
 4111              	.L350:
 4112 00b6 00BF     		.align	2
 4113              	.L349:
 4114 00b8 00000000 		.word	.LANCHOR10
 4115 00bc 00000000 		.word	.LANCHOR4
 4116 00c0 00000000 		.word	.LANCHOR13
 4117              		.cfi_endproc
 4118              	.LFE45:
 4120              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4121              		.align	2
 4122              		.global	uxTaskResetEventItemValue
 4123              		.thumb
 4124              		.thumb_func
 4126              	uxTaskResetEventItemValue:
 4127              	.LFB46:
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 4128              		.loc 1 4534 0
 4129              		.cfi_startproc
 4130              		@ args = 0, pretend = 0, frame = 0
 4131              		@ frame_needed = 0, uses_anonymous_args = 0
 4132              		@ link register save eliminated.
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4133              		.loc 1 4537 0
 4134 0000 044B     		ldr	r3, .L352
 4135 0002 1A68     		ldr	r2, [r3]
 4136 0004 9069     		ldr	r0, [r2, #24]
 4137              	.LVL346:
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4138              		.loc 1 4541 0
 4139 0006 1A68     		ldr	r2, [r3]
 4140 0008 1B68     		ldr	r3, [r3]
 4141 000a DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 175


 4142 000c C3F10703 		rsb	r3, r3, #7
 4143 0010 9361     		str	r3, [r2, #24]
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4144              		.loc 1 4544 0
 4145 0012 7047     		bx	lr
 4146              	.L353:
 4147              		.align	2
 4148              	.L352:
 4149 0014 00000000 		.word	.LANCHOR10
 4150              		.cfi_endproc
 4151              	.LFE46:
 4153              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 4154              		.align	2
 4155              		.global	pvTaskIncrementMutexHeldCount
 4156              		.thumb
 4157              		.thumb_func
 4159              	pvTaskIncrementMutexHeldCount:
 4160              	.LFB47:
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 4161              		.loc 1 4550 0
 4162              		.cfi_startproc
 4163              		@ args = 0, pretend = 0, frame = 0
 4164              		@ frame_needed = 0, uses_anonymous_args = 0
 4165              		@ link register save eliminated.
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4166              		.loc 1 4553 0
 4167 0000 054B     		ldr	r3, .L356
 4168 0002 1B68     		ldr	r3, [r3]
 4169 0004 23B1     		cbz	r3, .L355
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4170              		.loc 1 4555 0
 4171 0006 044B     		ldr	r3, .L356
 4172 0008 1A68     		ldr	r2, [r3]
 4173 000a 936C     		ldr	r3, [r2, #72]
 4174 000c 0133     		adds	r3, r3, #1
 4175 000e 9364     		str	r3, [r2, #72]
 4176              	.L355:
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4177              		.loc 1 4558 0
 4178 0010 014B     		ldr	r3, .L356
 4179 0012 1868     		ldr	r0, [r3]
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4180              		.loc 1 4559 0
 4181 0014 7047     		bx	lr
 4182              	.L357:
 4183 0016 00BF     		.align	2
 4184              	.L356:
 4185 0018 00000000 		.word	.LANCHOR10
 4186              		.cfi_endproc
 4187              	.LFE47:
 4189              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 4190              		.align	2
 4191              		.global	ulTaskNotifyTake
 4192              		.thumb
 4193              		.thumb_func
 4195              	ulTaskNotifyTake:
 4196              	.LFB48:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 176


4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 4197              		.loc 1 4567 0
 4198              		.cfi_startproc
 4199              		@ args = 0, pretend = 0, frame = 0
 4200              		@ frame_needed = 0, uses_anonymous_args = 0
 4201              	.LVL347:
 4202 0000 38B5     		push	{r3, r4, r5, lr}
 4203              	.LCFI44:
 4204              		.cfi_def_cfa_offset 16
 4205              		.cfi_offset 3, -16
 4206              		.cfi_offset 4, -12
 4207              		.cfi_offset 5, -8
 4208              		.cfi_offset 14, -4
 4209 0002 0546     		mov	r5, r0
 4210 0004 0C46     		mov	r4, r1
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4211              		.loc 1 4570 0
 4212 0006 FFF7FEFF 		bl	vPortEnterCritical
 4213              	.LVL348:
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4214              		.loc 1 4573 0
 4215 000a 184B     		ldr	r3, .L363
 4216 000c 1B68     		ldr	r3, [r3]
 4217 000e DB6C     		ldr	r3, [r3, #76]
 4218 0010 8BB9     		cbnz	r3, .L359
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4219              		.loc 1 4576 0
 4220 0012 164B     		ldr	r3, .L363
 4221 0014 1B68     		ldr	r3, [r3]
 4222 0016 0122     		movs	r2, #1
 4223 0018 83F85020 		strb	r2, [r3, #80]
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4224              		.loc 1 4578 0
 4225 001c 5CB1     		cbz	r4, .L359
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 4226              		.loc 1 4580 0
 4227 001e 1146     		mov	r1, r2
 4228 0020 2046     		mov	r0, r4
 4229 0022 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4230              	.LVL349:
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4231              		.loc 1 4587 0
 4232 0026 4FF08052 		mov	r2, #268435456
 4233 002a 114B     		ldr	r3, .L363+4
 4234 002c 1A60     		str	r2, [r3]
 4235              		.syntax unified
 4236              	@ 4587 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4237 002e BFF34F8F 		dsb
 4238              	@ 0 "" 2
 4239              	@ 4587 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4240 0032 BFF36F8F 		isb
 4241              	@ 0 "" 2
 4242              		.thumb
 4243              		.syntax unified
 4244              	.L359:
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4245              		.loc 1 4599 0
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 177


 4246 0036 FFF7FEFF 		bl	vPortExitCritical
 4247              	.LVL350:
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4248              		.loc 1 4601 0
 4249 003a FFF7FEFF 		bl	vPortEnterCritical
 4250              	.LVL351:
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4251              		.loc 1 4604 0
 4252 003e 0B4B     		ldr	r3, .L363
 4253 0040 1B68     		ldr	r3, [r3]
 4254 0042 DC6C     		ldr	r4, [r3, #76]
 4255              	.LVL352:
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4256              		.loc 1 4606 0
 4257 0044 4CB1     		cbz	r4, .L360
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4258              		.loc 1 4608 0
 4259 0046 25B1     		cbz	r5, .L361
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4260              		.loc 1 4610 0
 4261 0048 084B     		ldr	r3, .L363
 4262 004a 1B68     		ldr	r3, [r3]
 4263 004c 0022     		movs	r2, #0
 4264 004e DA64     		str	r2, [r3, #76]
 4265 0050 03E0     		b	.L360
 4266              	.L361:
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4267              		.loc 1 4614 0
 4268 0052 064B     		ldr	r3, .L363
 4269 0054 1B68     		ldr	r3, [r3]
 4270 0056 621E     		subs	r2, r4, #1
 4271 0058 DA64     		str	r2, [r3, #76]
 4272              	.L360:
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4273              		.loc 1 4622 0
 4274 005a 044B     		ldr	r3, .L363
 4275 005c 1B68     		ldr	r3, [r3]
 4276 005e 0022     		movs	r2, #0
 4277 0060 83F85020 		strb	r2, [r3, #80]
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4278              		.loc 1 4624 0
 4279 0064 FFF7FEFF 		bl	vPortExitCritical
 4280              	.LVL353:
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4281              		.loc 1 4627 0
 4282 0068 2046     		mov	r0, r4
 4283 006a 38BD     		pop	{r3, r4, r5, pc}
 4284              	.LVL354:
 4285              	.L364:
 4286              		.align	2
 4287              	.L363:
 4288 006c 00000000 		.word	.LANCHOR10
 4289 0070 04ED00E0 		.word	-536810236
 4290              		.cfi_endproc
 4291              	.LFE48:
 4293              		.section	.text.xTaskNotifyWait,"ax",%progbits
 4294              		.align	2
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 178


 4295              		.global	xTaskNotifyWait
 4296              		.thumb
 4297              		.thumb_func
 4299              	xTaskNotifyWait:
 4300              	.LFB49:
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4301              		.loc 1 4635 0
 4302              		.cfi_startproc
 4303              		@ args = 0, pretend = 0, frame = 0
 4304              		@ frame_needed = 0, uses_anonymous_args = 0
 4305              	.LVL355:
 4306 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4307              	.LCFI45:
 4308              		.cfi_def_cfa_offset 24
 4309              		.cfi_offset 3, -24
 4310              		.cfi_offset 4, -20
 4311              		.cfi_offset 5, -16
 4312              		.cfi_offset 6, -12
 4313              		.cfi_offset 7, -8
 4314              		.cfi_offset 14, -4
 4315 0002 0746     		mov	r7, r0
 4316 0004 0D46     		mov	r5, r1
 4317 0006 1446     		mov	r4, r2
 4318 0008 1E46     		mov	r6, r3
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4319              		.loc 1 4638 0
 4320 000a FFF7FEFF 		bl	vPortEnterCritical
 4321              	.LVL356:
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4322              		.loc 1 4641 0
 4323 000e 204B     		ldr	r3, .L371
 4324 0010 1B68     		ldr	r3, [r3]
 4325 0012 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4326 0016 DBB2     		uxtb	r3, r3
 4327 0018 022B     		cmp	r3, #2
 4328 001a 16D0     		beq	.L366
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4329              		.loc 1 4646 0
 4330 001c 1C4B     		ldr	r3, .L371
 4331 001e 1A68     		ldr	r2, [r3]
 4332 0020 D06C     		ldr	r0, [r2, #76]
 4333 0022 20EA0700 		bic	r0, r0, r7
 4334 0026 D064     		str	r0, [r2, #76]
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4335              		.loc 1 4649 0
 4336 0028 1B68     		ldr	r3, [r3]
 4337 002a 0122     		movs	r2, #1
 4338 002c 83F85020 		strb	r2, [r3, #80]
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4339              		.loc 1 4651 0
 4340 0030 5EB1     		cbz	r6, .L366
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 4341              		.loc 1 4653 0
 4342 0032 1146     		mov	r1, r2
 4343 0034 3046     		mov	r0, r6
 4344 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4345              	.LVL357:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 179


4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4346              		.loc 1 4660 0
 4347 003a 4FF08052 		mov	r2, #268435456
 4348 003e 154B     		ldr	r3, .L371+4
 4349 0040 1A60     		str	r2, [r3]
 4350              		.syntax unified
 4351              	@ 4660 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4352 0042 BFF34F8F 		dsb
 4353              	@ 0 "" 2
 4354              	@ 4660 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4355 0046 BFF36F8F 		isb
 4356              	@ 0 "" 2
 4357              		.thumb
 4358              		.syntax unified
 4359              	.L366:
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4360              		.loc 1 4672 0
 4361 004a FFF7FEFF 		bl	vPortExitCritical
 4362              	.LVL358:
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4363              		.loc 1 4674 0
 4364 004e FFF7FEFF 		bl	vPortEnterCritical
 4365              	.LVL359:
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4366              		.loc 1 4678 0
 4367 0052 1CB1     		cbz	r4, .L367
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4368              		.loc 1 4682 0
 4369 0054 0E4B     		ldr	r3, .L371
 4370 0056 1B68     		ldr	r3, [r3]
 4371 0058 DB6C     		ldr	r3, [r3, #76]
 4372 005a 2360     		str	r3, [r4]
 4373              	.L367:
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4374              		.loc 1 4689 0
 4375 005c 0C4B     		ldr	r3, .L371
 4376 005e 1B68     		ldr	r3, [r3]
 4377 0060 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 4378 0064 DBB2     		uxtb	r3, r3
 4379 0066 022B     		cmp	r3, #2
 4380 0068 07D1     		bne	.L369
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 4381              		.loc 1 4698 0
 4382 006a 094B     		ldr	r3, .L371
 4383 006c 1A68     		ldr	r2, [r3]
 4384 006e D36C     		ldr	r3, [r2, #76]
 4385 0070 23EA0505 		bic	r5, r3, r5
 4386              	.LVL360:
 4387 0074 D564     		str	r5, [r2, #76]
 4388              	.LVL361:
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4389              		.loc 1 4699 0
 4390 0076 0124     		movs	r4, #1
 4391              	.LVL362:
 4392 0078 00E0     		b	.L368
 4393              	.LVL363:
 4394              	.L369:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 180


4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4395              		.loc 1 4692 0
 4396 007a 0024     		movs	r4, #0
 4397              	.LVL364:
 4398              	.L368:
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4399              		.loc 1 4702 0
 4400 007c 044B     		ldr	r3, .L371
 4401 007e 1B68     		ldr	r3, [r3]
 4402 0080 0022     		movs	r2, #0
 4403 0082 83F85020 		strb	r2, [r3, #80]
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4404              		.loc 1 4704 0
 4405 0086 FFF7FEFF 		bl	vPortExitCritical
 4406              	.LVL365:
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4407              		.loc 1 4707 0
 4408 008a 2046     		mov	r0, r4
 4409 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4410              	.LVL366:
 4411              	.L372:
 4412 008e 00BF     		.align	2
 4413              	.L371:
 4414 0090 00000000 		.word	.LANCHOR10
 4415 0094 04ED00E0 		.word	-536810236
 4416              		.cfi_endproc
 4417              	.LFE49:
 4419              		.section	.text.xTaskGenericNotify,"ax",%progbits
 4420              		.align	2
 4421              		.global	xTaskGenericNotify
 4422              		.thumb
 4423              		.thumb_func
 4425              	xTaskGenericNotify:
 4426              	.LFB50:
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4427              		.loc 1 4715 0
 4428              		.cfi_startproc
 4429              		@ args = 0, pretend = 0, frame = 0
 4430              		@ frame_needed = 0, uses_anonymous_args = 0
 4431              	.LVL367:
 4432 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4433              	.LCFI46:
 4434              		.cfi_def_cfa_offset 24
 4435              		.cfi_offset 3, -24
 4436              		.cfi_offset 4, -20
 4437              		.cfi_offset 5, -16
 4438              		.cfi_offset 6, -12
 4439              		.cfi_offset 7, -8
 4440              		.cfi_offset 14, -4
 4441              	.LVL368:
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 4442              		.loc 1 4720 0
 4443 0002 40B9     		cbnz	r0, .L374
 4444              	.LBB191:
 4445              	.LBB192:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4446              		.loc 2 195 0
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 181


 4447              		.syntax unified
 4448              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4449 0004 4FF05003 			mov r3, #80												
 4450 0008 83F31188 		msr basepri, r3											
 4451 000c BFF36F8F 		isb														
 4452 0010 BFF34F8F 		dsb														
 4453              	
 4454              	@ 0 "" 2
 4455              	.LVL369:
 4456              		.thumb
 4457              		.syntax unified
 4458              	.L375:
 4459 0014 FEE7     		b	.L375
 4460              	.LVL370:
 4461              	.L374:
 4462 0016 0446     		mov	r4, r0
 4463 0018 1F46     		mov	r7, r3
 4464 001a 1646     		mov	r6, r2
 4465 001c 0D46     		mov	r5, r1
 4466              	.LVL371:
 4467              	.LBE192:
 4468              	.LBE191:
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4469              		.loc 1 4723 0
 4470 001e FFF7FEFF 		bl	vPortEnterCritical
 4471              	.LVL372:
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4472              		.loc 1 4725 0
 4473 0022 0FB1     		cbz	r7, .L376
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4474              		.loc 1 4727 0
 4475 0024 E36C     		ldr	r3, [r4, #76]
 4476 0026 3B60     		str	r3, [r7]
 4477              	.L376:
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4478              		.loc 1 4730 0
 4479 0028 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4480 002c DBB2     		uxtb	r3, r3
 4481              	.LVL373:
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4482              		.loc 1 4732 0
 4483 002e 0222     		movs	r2, #2
 4484 0030 84F85020 		strb	r2, [r4, #80]
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4485              		.loc 1 4734 0
 4486 0034 042E     		cmp	r6, #4
 4487 0036 16D8     		bhi	.L377
 4488 0038 DFE806F0 		tbb	[pc, r6]
 4489              	.L379:
 4490 003c 22       		.byte	(.L388-.L379)/2
 4491 003d 03       		.byte	(.L380-.L379)/2
 4492 003e 08       		.byte	(.L381-.L379)/2
 4493 003f 0D       		.byte	(.L382-.L379)/2
 4494 0040 10       		.byte	(.L383-.L379)/2
 4495 0041 00       		.p2align 1
 4496              	.L380:
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 182


 4497              		.loc 1 4737 0
 4498 0042 E26C     		ldr	r2, [r4, #76]
 4499 0044 1543     		orrs	r5, r5, r2
 4500              	.LVL374:
 4501 0046 E564     		str	r5, [r4, #76]
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4502              		.loc 1 4717 0
 4503 0048 0125     		movs	r5, #1
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4504              		.loc 1 4738 0
 4505 004a 1EE0     		b	.L378
 4506              	.LVL375:
 4507              	.L381:
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4508              		.loc 1 4741 0
 4509 004c E26C     		ldr	r2, [r4, #76]
 4510 004e 0132     		adds	r2, r2, #1
 4511 0050 E264     		str	r2, [r4, #76]
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4512              		.loc 1 4717 0
 4513 0052 0125     		movs	r5, #1
 4514              	.LVL376:
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4515              		.loc 1 4742 0
 4516 0054 19E0     		b	.L378
 4517              	.LVL377:
 4518              	.L382:
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4519              		.loc 1 4745 0
 4520 0056 E564     		str	r5, [r4, #76]
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4521              		.loc 1 4717 0
 4522 0058 0125     		movs	r5, #1
 4523              	.LVL378:
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4524              		.loc 1 4746 0
 4525 005a 16E0     		b	.L378
 4526              	.LVL379:
 4527              	.L383:
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4528              		.loc 1 4749 0
 4529 005c 022B     		cmp	r3, #2
 4530 005e 11D0     		beq	.L389
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4531              		.loc 1 4751 0
 4532 0060 E564     		str	r5, [r4, #76]
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4533              		.loc 1 4717 0
 4534 0062 0125     		movs	r5, #1
 4535              	.LVL380:
 4536 0064 11E0     		b	.L378
 4537              	.LVL381:
 4538              	.L377:
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4539              		.loc 1 4769 0
 4540 0066 E26C     		ldr	r2, [r4, #76]
 4541 0068 B2F1FF3F 		cmp	r2, #-1
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 183


 4542 006c 0CD0     		beq	.L390
 4543              	.LBB193:
 4544              	.LBB194:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4545              		.loc 2 195 0
 4546              		.syntax unified
 4547              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4548 006e 4FF05003 			mov r3, #80												
 4549 0072 83F31188 		msr basepri, r3											
 4550 0076 BFF36F8F 		isb														
 4551 007a BFF34F8F 		dsb														
 4552              	
 4553              	@ 0 "" 2
 4554              	.LVL382:
 4555              		.thumb
 4556              		.syntax unified
 4557              	.L384:
 4558 007e FEE7     		b	.L384
 4559              	.LVL383:
 4560              	.L388:
 4561              	.LBE194:
 4562              	.LBE193:
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4563              		.loc 1 4717 0
 4564 0080 0125     		movs	r5, #1
 4565              	.LVL384:
 4566 0082 02E0     		b	.L378
 4567              	.LVL385:
 4568              	.L389:
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4569              		.loc 1 4756 0
 4570 0084 0025     		movs	r5, #0
 4571              	.LVL386:
 4572 0086 00E0     		b	.L378
 4573              	.LVL387:
 4574              	.L390:
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4575              		.loc 1 4717 0
 4576 0088 0125     		movs	r5, #1
 4577              	.LVL388:
 4578              	.L378:
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4579              		.loc 1 4778 0
 4580 008a 012B     		cmp	r3, #1
 4581 008c 2CD1     		bne	.L385
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4582              		.loc 1 4780 0
 4583 008e 261D     		adds	r6, r4, #4
 4584 0090 3046     		mov	r0, r6
 4585 0092 FFF7FEFF 		bl	uxListRemove
 4586              	.LVL389:
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4587              		.loc 1 4781 0
 4588 0096 E36A     		ldr	r3, [r4, #44]
 4589 0098 0122     		movs	r2, #1
 4590 009a 02FA03F1 		lsl	r1, r2, r3
 4591 009e 1448     		ldr	r0, .L392
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 184


 4592 00a0 0268     		ldr	r2, [r0]
 4593 00a2 0A43     		orrs	r2, r2, r1
 4594 00a4 0260     		str	r2, [r0]
 4595 00a6 03EB8303 		add	r3, r3, r3, lsl #2
 4596 00aa 9A00     		lsls	r2, r3, #2
 4597 00ac 3146     		mov	r1, r6
 4598 00ae 1148     		ldr	r0, .L392+4
 4599 00b0 1044     		add	r0, r0, r2
 4600 00b2 FFF7FEFF 		bl	vListInsertEnd
 4601              	.LVL390:
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4602              		.loc 1 4784 0
 4603 00b6 A36A     		ldr	r3, [r4, #40]
 4604 00b8 43B1     		cbz	r3, .L386
 4605              	.LBB195:
 4606              	.LBB196:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4607              		.loc 2 195 0
 4608              		.syntax unified
 4609              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4610 00ba 4FF05003 			mov r3, #80												
 4611 00be 83F31188 		msr basepri, r3											
 4612 00c2 BFF36F8F 		isb														
 4613 00c6 BFF34F8F 		dsb														
 4614              	
 4615              	@ 0 "" 2
 4616              	.LVL391:
 4617              		.thumb
 4618              		.syntax unified
 4619              	.L387:
 4620 00ca FEE7     		b	.L387
 4621              	.L386:
 4622              	.LBE196:
 4623              	.LBE195:
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4624              		.loc 1 4802 0
 4625 00cc E26A     		ldr	r2, [r4, #44]
 4626 00ce 0A4B     		ldr	r3, .L392+8
 4627 00d0 1B68     		ldr	r3, [r3]
 4628 00d2 DB6A     		ldr	r3, [r3, #44]
 4629 00d4 9A42     		cmp	r2, r3
 4630 00d6 07D9     		bls	.L385
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4631              		.loc 1 4806 0
 4632 00d8 4FF08052 		mov	r2, #268435456
 4633 00dc 074B     		ldr	r3, .L392+12
 4634 00de 1A60     		str	r2, [r3]
 4635              		.syntax unified
 4636              	@ 4806 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4637 00e0 BFF34F8F 		dsb
 4638              	@ 0 "" 2
 4639              	@ 4806 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4640 00e4 BFF36F8F 		isb
 4641              	@ 0 "" 2
 4642              		.thumb
 4643              		.syntax unified
 4644              	.L385:
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 185


4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4645              		.loc 1 4818 0
 4646 00e8 FFF7FEFF 		bl	vPortExitCritical
 4647              	.LVL392:
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4648              		.loc 1 4821 0
 4649 00ec 2846     		mov	r0, r5
 4650 00ee F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4651              	.LVL393:
 4652              	.L393:
 4653              		.align	2
 4654              	.L392:
 4655 00f0 00000000 		.word	.LANCHOR13
 4656 00f4 00000000 		.word	.LANCHOR4
 4657 00f8 00000000 		.word	.LANCHOR10
 4658 00fc 04ED00E0 		.word	-536810236
 4659              		.cfi_endproc
 4660              	.LFE50:
 4662              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4663              		.align	2
 4664              		.global	xTaskGenericNotifyFromISR
 4665              		.thumb
 4666              		.thumb_func
 4668              	xTaskGenericNotifyFromISR:
 4669              	.LFB51:
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4670              		.loc 1 4829 0
 4671              		.cfi_startproc
 4672              		@ args = 4, pretend = 0, frame = 0
 4673              		@ frame_needed = 0, uses_anonymous_args = 0
 4674              	.LVL394:
 4675 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 4676              	.LCFI47:
 4677              		.cfi_def_cfa_offset 32
 4678              		.cfi_offset 3, -32
 4679              		.cfi_offset 4, -28
 4680              		.cfi_offset 5, -24
 4681              		.cfi_offset 6, -20
 4682              		.cfi_offset 7, -16
 4683              		.cfi_offset 8, -12
 4684              		.cfi_offset 9, -8
 4685              		.cfi_offset 14, -4
 4686 0004 089E     		ldr	r6, [sp, #32]
 4687              	.LVL395:
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4688              		.loc 1 4835 0
 4689 0006 40B9     		cbnz	r0, .L395
 4690              	.LBB197:
 4691              	.LBB198:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4692              		.loc 2 195 0
 4693              		.syntax unified
 4694              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4695 0008 4FF05003 			mov r3, #80												
 4696 000c 83F31188 		msr basepri, r3											
 4697 0010 BFF36F8F 		isb														
 4698 0014 BFF34F8F 		dsb														
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 186


 4699              	
 4700              	@ 0 "" 2
 4701              	.LVL396:
 4702              		.thumb
 4703              		.syntax unified
 4704              	.L396:
 4705 0018 FEE7     		b	.L396
 4706              	.LVL397:
 4707              	.L395:
 4708 001a 0446     		mov	r4, r0
 4709 001c 9946     		mov	r9, r3
 4710 001e 9046     		mov	r8, r2
 4711 0020 0D46     		mov	r5, r1
 4712              	.LBE198:
 4713              	.LBE197:
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4714              		.loc 1 4853 0
 4715 0022 FFF7FEFF 		bl	vPortValidateInterruptPriority
 4716              	.LVL398:
 4717              	.LBB199:
 4718              	.LBB200:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4719              		.loc 2 211 0
 4720              		.syntax unified
 4721              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4722 0026 EFF31187 			mrs r7, basepri											
 4723 002a 4FF05003 		mov r3, #80												
 4724 002e 83F31188 		msr basepri, r3											
 4725 0032 BFF36F8F 		isb														
 4726 0036 BFF34F8F 		dsb														
 4727              	
 4728              	@ 0 "" 2
 4729              		.thumb
 4730              		.syntax unified
 4731              	.LBE200:
 4732              	.LBE199:
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4733              		.loc 1 4859 0
 4734 003a B9F1000F 		cmp	r9, #0
 4735 003e 02D0     		beq	.L397
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4736              		.loc 1 4861 0
 4737 0040 E36C     		ldr	r3, [r4, #76]
 4738 0042 C9F80030 		str	r3, [r9]
 4739              	.L397:
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4740              		.loc 1 4864 0
 4741 0046 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4742 004a DBB2     		uxtb	r3, r3
 4743              	.LVL399:
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4744              		.loc 1 4865 0
 4745 004c 0222     		movs	r2, #2
 4746 004e 84F85020 		strb	r2, [r4, #80]
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4747              		.loc 1 4867 0
 4748 0052 B8F1040F 		cmp	r8, #4
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 187


 4749 0056 16D8     		bhi	.L398
 4750 0058 DFE808F0 		tbb	[pc, r8]
 4751              	.L400:
 4752 005c 22       		.byte	(.L412-.L400)/2
 4753 005d 03       		.byte	(.L401-.L400)/2
 4754 005e 08       		.byte	(.L402-.L400)/2
 4755 005f 0D       		.byte	(.L403-.L400)/2
 4756 0060 10       		.byte	(.L404-.L400)/2
 4757 0061 00       		.p2align 1
 4758              	.L401:
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4759              		.loc 1 4870 0
 4760 0062 E26C     		ldr	r2, [r4, #76]
 4761 0064 1543     		orrs	r5, r5, r2
 4762              	.LVL400:
 4763 0066 E564     		str	r5, [r4, #76]
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4764              		.loc 1 4832 0
 4765 0068 0125     		movs	r5, #1
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4766              		.loc 1 4871 0
 4767 006a 1EE0     		b	.L399
 4768              	.LVL401:
 4769              	.L402:
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4770              		.loc 1 4874 0
 4771 006c E26C     		ldr	r2, [r4, #76]
 4772 006e 0132     		adds	r2, r2, #1
 4773 0070 E264     		str	r2, [r4, #76]
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4774              		.loc 1 4832 0
 4775 0072 0125     		movs	r5, #1
 4776              	.LVL402:
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4777              		.loc 1 4875 0
 4778 0074 19E0     		b	.L399
 4779              	.LVL403:
 4780              	.L403:
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4781              		.loc 1 4878 0
 4782 0076 E564     		str	r5, [r4, #76]
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4783              		.loc 1 4832 0
 4784 0078 0125     		movs	r5, #1
 4785              	.LVL404:
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4786              		.loc 1 4879 0
 4787 007a 16E0     		b	.L399
 4788              	.LVL405:
 4789              	.L404:
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4790              		.loc 1 4882 0
 4791 007c 022B     		cmp	r3, #2
 4792 007e 11D0     		beq	.L413
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4793              		.loc 1 4884 0
 4794 0080 E564     		str	r5, [r4, #76]
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 188


4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4795              		.loc 1 4832 0
 4796 0082 0125     		movs	r5, #1
 4797              	.LVL406:
 4798 0084 11E0     		b	.L399
 4799              	.LVL407:
 4800              	.L398:
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4801              		.loc 1 4902 0
 4802 0086 E26C     		ldr	r2, [r4, #76]
 4803 0088 B2F1FF3F 		cmp	r2, #-1
 4804 008c 0CD0     		beq	.L414
 4805              	.LBB201:
 4806              	.LBB202:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4807              		.loc 2 195 0
 4808              		.syntax unified
 4809              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4810 008e 4FF05003 			mov r3, #80												
 4811 0092 83F31188 		msr basepri, r3											
 4812 0096 BFF36F8F 		isb														
 4813 009a BFF34F8F 		dsb														
 4814              	
 4815              	@ 0 "" 2
 4816              	.LVL408:
 4817              		.thumb
 4818              		.syntax unified
 4819              	.L405:
 4820 009e FEE7     		b	.L405
 4821              	.LVL409:
 4822              	.L412:
 4823              	.LBE202:
 4824              	.LBE201:
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4825              		.loc 1 4832 0
 4826 00a0 0125     		movs	r5, #1
 4827              	.LVL410:
 4828 00a2 02E0     		b	.L399
 4829              	.LVL411:
 4830              	.L413:
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4831              		.loc 1 4889 0
 4832 00a4 0025     		movs	r5, #0
 4833              	.LVL412:
 4834 00a6 00E0     		b	.L399
 4835              	.LVL413:
 4836              	.L414:
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4837              		.loc 1 4832 0
 4838 00a8 0125     		movs	r5, #1
 4839              	.LVL414:
 4840              	.L399:
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4841              		.loc 1 4910 0
 4842 00aa 012B     		cmp	r3, #1
 4843 00ac 34D1     		bne	.L406
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 189


 4844              		.loc 1 4913 0
 4845 00ae A36A     		ldr	r3, [r4, #40]
 4846              	.LVL415:
 4847 00b0 43B1     		cbz	r3, .L407
 4848              	.LBB203:
 4849              	.LBB204:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4850              		.loc 2 195 0
 4851              		.syntax unified
 4852              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4853 00b2 4FF05003 			mov r3, #80												
 4854 00b6 83F31188 		msr basepri, r3											
 4855 00ba BFF36F8F 		isb														
 4856 00be BFF34F8F 		dsb														
 4857              	
 4858              	@ 0 "" 2
 4859              	.LVL416:
 4860              		.thumb
 4861              		.syntax unified
 4862              	.L408:
 4863 00c2 FEE7     		b	.L408
 4864              	.L407:
 4865              	.LBE204:
 4866              	.LBE203:
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4867              		.loc 1 4915 0
 4868 00c4 174B     		ldr	r3, .L416
 4869 00c6 1B68     		ldr	r3, [r3]
 4870 00c8 ABB9     		cbnz	r3, .L409
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4871              		.loc 1 4917 0
 4872 00ca 04F10408 		add	r8, r4, #4
 4873 00ce 4046     		mov	r0, r8
 4874 00d0 FFF7FEFF 		bl	uxListRemove
 4875              	.LVL417:
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4876              		.loc 1 4918 0
 4877 00d4 E36A     		ldr	r3, [r4, #44]
 4878 00d6 0122     		movs	r2, #1
 4879 00d8 02FA03F1 		lsl	r1, r2, r3
 4880 00dc 1248     		ldr	r0, .L416+4
 4881 00de 0268     		ldr	r2, [r0]
 4882 00e0 0A43     		orrs	r2, r2, r1
 4883 00e2 0260     		str	r2, [r0]
 4884 00e4 03EB8303 		add	r3, r3, r3, lsl #2
 4885 00e8 9A00     		lsls	r2, r3, #2
 4886 00ea 4146     		mov	r1, r8
 4887 00ec 0F48     		ldr	r0, .L416+8
 4888 00ee 1044     		add	r0, r0, r2
 4889 00f0 FFF7FEFF 		bl	vListInsertEnd
 4890              	.LVL418:
 4891 00f4 04E0     		b	.L410
 4892              	.L409:
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4893              		.loc 1 4924 0
 4894 00f6 04F11801 		add	r1, r4, #24
 4895 00fa 0D48     		ldr	r0, .L416+12
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 190


 4896 00fc FFF7FEFF 		bl	vListInsertEnd
 4897              	.LVL419:
 4898              	.L410:
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4899              		.loc 1 4927 0
 4900 0100 E26A     		ldr	r2, [r4, #44]
 4901 0102 0C4B     		ldr	r3, .L416+16
 4902 0104 1B68     		ldr	r3, [r3]
 4903 0106 DB6A     		ldr	r3, [r3, #44]
 4904 0108 9A42     		cmp	r2, r3
 4905 010a 05D9     		bls	.L406
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4906              		.loc 1 4931 0
 4907 010c 0EB1     		cbz	r6, .L411
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4908              		.loc 1 4933 0
 4909 010e 0123     		movs	r3, #1
 4910 0110 3360     		str	r3, [r6]
 4911              	.L411:
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4912              		.loc 1 4939 0
 4913 0112 0122     		movs	r2, #1
 4914 0114 084B     		ldr	r3, .L416+20
 4915 0116 1A60     		str	r2, [r3]
 4916              	.L406:
 4917              	.LVL420:
 4918              	.LBB205:
 4919              	.LBB206:
 4920              		.loc 2 229 0
 4921              		.syntax unified
 4922              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4923 0118 87F31188 			msr basepri, r7	
 4924              	@ 0 "" 2
 4925              	.LVL421:
 4926              		.thumb
 4927              		.syntax unified
 4928              	.LBE206:
 4929              	.LBE205:
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4930              		.loc 1 4950 0
 4931 011c 2846     		mov	r0, r5
 4932 011e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4933              	.LVL422:
 4934              	.L417:
 4935 0122 00BF     		.align	2
 4936              	.L416:
 4937 0124 00000000 		.word	.LANCHOR16
 4938 0128 00000000 		.word	.LANCHOR13
 4939 012c 00000000 		.word	.LANCHOR4
 4940 0130 00000000 		.word	.LANCHOR1
 4941 0134 00000000 		.word	.LANCHOR10
 4942 0138 00000000 		.word	.LANCHOR19
 4943              		.cfi_endproc
 4944              	.LFE51:
 4946              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4947              		.align	2
 4948              		.global	vTaskNotifyGiveFromISR
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 191


 4949              		.thumb
 4950              		.thumb_func
 4952              	vTaskNotifyGiveFromISR:
 4953              	.LFB52:
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4954              		.loc 1 4958 0
 4955              		.cfi_startproc
 4956              		@ args = 0, pretend = 0, frame = 0
 4957              		@ frame_needed = 0, uses_anonymous_args = 0
 4958              	.LVL423:
 4959 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4960              	.LCFI48:
 4961              		.cfi_def_cfa_offset 24
 4962              		.cfi_offset 3, -24
 4963              		.cfi_offset 4, -20
 4964              		.cfi_offset 5, -16
 4965              		.cfi_offset 6, -12
 4966              		.cfi_offset 7, -8
 4967              		.cfi_offset 14, -4
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4968              		.loc 1 4963 0
 4969 0002 40B9     		cbnz	r0, .L419
 4970              	.LBB207:
 4971              	.LBB208:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4972              		.loc 2 195 0
 4973              		.syntax unified
 4974              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4975 0004 4FF05003 			mov r3, #80												
 4976 0008 83F31188 		msr basepri, r3											
 4977 000c BFF36F8F 		isb														
 4978 0010 BFF34F8F 		dsb														
 4979              	
 4980              	@ 0 "" 2
 4981              	.LVL424:
 4982              		.thumb
 4983              		.syntax unified
 4984              	.L420:
 4985 0014 FEE7     		b	.L420
 4986              	.L419:
 4987 0016 0446     		mov	r4, r0
 4988 0018 0D46     		mov	r5, r1
 4989              	.LBE208:
 4990              	.LBE207:
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4991              		.loc 1 4981 0
 4992 001a FFF7FEFF 		bl	vPortValidateInterruptPriority
 4993              	.LVL425:
 4994              	.LBB209:
 4995              	.LBB210:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4996              		.loc 2 211 0
 4997              		.syntax unified
 4998              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4999 001e EFF31187 			mrs r7, basepri											
 5000 0022 4FF05003 		mov r3, #80												
 5001 0026 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 192


 5002 002a BFF36F8F 		isb														
 5003 002e BFF34F8F 		dsb														
 5004              	
 5005              	@ 0 "" 2
 5006              		.thumb
 5007              		.syntax unified
 5008              	.LBE210:
 5009              	.LBE209:
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5010              		.loc 1 4987 0
 5011 0032 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 5012 0036 DBB2     		uxtb	r3, r3
 5013              	.LVL426:
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5014              		.loc 1 4988 0
 5015 0038 0222     		movs	r2, #2
 5016 003a 84F85020 		strb	r2, [r4, #80]
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5017              		.loc 1 4992 0
 5018 003e E26C     		ldr	r2, [r4, #76]
 5019 0040 0132     		adds	r2, r2, #1
 5020 0042 E264     		str	r2, [r4, #76]
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5021              		.loc 1 4998 0
 5022 0044 012B     		cmp	r3, #1
 5023 0046 33D1     		bne	.L421
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5024              		.loc 1 5001 0
 5025 0048 A36A     		ldr	r3, [r4, #40]
 5026              	.LVL427:
 5027 004a 43B1     		cbz	r3, .L422
 5028              	.LBB211:
 5029              	.LBB212:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5030              		.loc 2 195 0
 5031              		.syntax unified
 5032              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5033 004c 4FF05003 			mov r3, #80												
 5034 0050 83F31188 		msr basepri, r3											
 5035 0054 BFF36F8F 		isb														
 5036 0058 BFF34F8F 		dsb														
 5037              	
 5038              	@ 0 "" 2
 5039              	.LVL428:
 5040              		.thumb
 5041              		.syntax unified
 5042              	.L423:
 5043 005c FEE7     		b	.L423
 5044              	.L422:
 5045              	.LBE212:
 5046              	.LBE211:
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5047              		.loc 1 5003 0
 5048 005e 164B     		ldr	r3, .L428
 5049 0060 1B68     		ldr	r3, [r3]
 5050 0062 A3B9     		cbnz	r3, .L424
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 193


 5051              		.loc 1 5005 0
 5052 0064 261D     		adds	r6, r4, #4
 5053 0066 3046     		mov	r0, r6
 5054 0068 FFF7FEFF 		bl	uxListRemove
 5055              	.LVL429:
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5056              		.loc 1 5006 0
 5057 006c E36A     		ldr	r3, [r4, #44]
 5058 006e 0122     		movs	r2, #1
 5059 0070 02FA03F1 		lsl	r1, r2, r3
 5060 0074 1148     		ldr	r0, .L428+4
 5061 0076 0268     		ldr	r2, [r0]
 5062 0078 0A43     		orrs	r2, r2, r1
 5063 007a 0260     		str	r2, [r0]
 5064 007c 03EB8303 		add	r3, r3, r3, lsl #2
 5065 0080 9A00     		lsls	r2, r3, #2
 5066 0082 3146     		mov	r1, r6
 5067 0084 0E48     		ldr	r0, .L428+8
 5068 0086 1044     		add	r0, r0, r2
 5069 0088 FFF7FEFF 		bl	vListInsertEnd
 5070              	.LVL430:
 5071 008c 04E0     		b	.L425
 5072              	.L424:
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5073              		.loc 1 5012 0
 5074 008e 04F11801 		add	r1, r4, #24
 5075 0092 0C48     		ldr	r0, .L428+12
 5076 0094 FFF7FEFF 		bl	vListInsertEnd
 5077              	.LVL431:
 5078              	.L425:
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5079              		.loc 1 5015 0
 5080 0098 E26A     		ldr	r2, [r4, #44]
 5081 009a 0B4B     		ldr	r3, .L428+16
 5082 009c 1B68     		ldr	r3, [r3]
 5083 009e DB6A     		ldr	r3, [r3, #44]
 5084 00a0 9A42     		cmp	r2, r3
 5085 00a2 05D9     		bls	.L421
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5086              		.loc 1 5019 0
 5087 00a4 0DB1     		cbz	r5, .L426
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5088              		.loc 1 5021 0
 5089 00a6 0123     		movs	r3, #1
 5090 00a8 2B60     		str	r3, [r5]
 5091              	.L426:
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5092              		.loc 1 5027 0
 5093 00aa 0122     		movs	r2, #1
 5094 00ac 074B     		ldr	r3, .L428+20
 5095 00ae 1A60     		str	r2, [r3]
 5096              	.L421:
 5097              	.LVL432:
 5098              	.LBB213:
 5099              	.LBB214:
 5100              		.loc 2 229 0
 5101              		.syntax unified
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 194


 5102              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5103 00b0 87F31188 			msr basepri, r7	
 5104              	@ 0 "" 2
 5105              	.LVL433:
 5106              		.thumb
 5107              		.syntax unified
 5108 00b4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5109              	.LVL434:
 5110              	.L429:
 5111 00b6 00BF     		.align	2
 5112              	.L428:
 5113 00b8 00000000 		.word	.LANCHOR16
 5114 00bc 00000000 		.word	.LANCHOR13
 5115 00c0 00000000 		.word	.LANCHOR4
 5116 00c4 00000000 		.word	.LANCHOR1
 5117 00c8 00000000 		.word	.LANCHOR10
 5118 00cc 00000000 		.word	.LANCHOR19
 5119              	.LBE214:
 5120              	.LBE213:
 5121              		.cfi_endproc
 5122              	.LFE52:
 5124              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 5125              		.align	2
 5126              		.global	xTaskNotifyStateClear
 5127              		.thumb
 5128              		.thumb_func
 5130              	xTaskNotifyStateClear:
 5131              	.LFB53:
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5132              		.loc 1 5045 0
 5133              		.cfi_startproc
 5134              		@ args = 0, pretend = 0, frame = 0
 5135              		@ frame_needed = 0, uses_anonymous_args = 0
 5136              	.LVL435:
 5137 0000 10B5     		push	{r4, lr}
 5138              	.LCFI49:
 5139              		.cfi_def_cfa_offset 8
 5140              		.cfi_offset 4, -8
 5141              		.cfi_offset 14, -4
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5142              		.loc 1 5051 0
 5143 0002 0446     		mov	r4, r0
 5144 0004 08B9     		cbnz	r0, .L431
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5145              		.loc 1 5051 0 is_stmt 0 discriminator 1
 5146 0006 094B     		ldr	r3, .L435
 5147 0008 1C68     		ldr	r4, [r3]
 5148              	.LVL436:
 5149              	.L431:
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5150              		.loc 1 5053 0 is_stmt 1 discriminator 4
 5151 000a FFF7FEFF 		bl	vPortEnterCritical
 5152              	.LVL437:
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5153              		.loc 1 5055 0 discriminator 4
 5154 000e 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 5155 0012 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 195


 5156 0014 022B     		cmp	r3, #2
 5157 0016 04D1     		bne	.L433
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 5158              		.loc 1 5057 0
 5159 0018 0023     		movs	r3, #0
 5160 001a 84F85030 		strb	r3, [r4, #80]
 5161              	.LVL438:
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5162              		.loc 1 5058 0
 5163 001e 0124     		movs	r4, #1
 5164              	.LVL439:
 5165 0020 00E0     		b	.L432
 5166              	.LVL440:
 5167              	.L433:
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5168              		.loc 1 5062 0
 5169 0022 0024     		movs	r4, #0
 5170              	.LVL441:
 5171              	.L432:
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5172              		.loc 1 5065 0
 5173 0024 FFF7FEFF 		bl	vPortExitCritical
 5174              	.LVL442:
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5175              		.loc 1 5068 0
 5176 0028 2046     		mov	r0, r4
 5177 002a 10BD     		pop	{r4, pc}
 5178              	.LVL443:
 5179              	.L436:
 5180              		.align	2
 5181              	.L435:
 5182 002c 00000000 		.word	.LANCHOR10
 5183              		.cfi_endproc
 5184              	.LFE53:
 5186              		.global	pxCurrentTCB
 5187              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5188              		.align	2
 5189              		.set	.LANCHOR2,. + 0
 5192              	pxDelayedTaskList:
 5193 0000 00000000 		.space	4
 5194              		.section	.bss.xSchedulerRunning,"aw",%nobits
 5195              		.align	2
 5196              		.set	.LANCHOR11,. + 0
 5199              	xSchedulerRunning:
 5200 0000 00000000 		.space	4
 5201              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 5202              		.align	2
 5203              		.set	.LANCHOR7,. + 0
 5206              	xTasksWaitingTermination:
 5207 0000 00000000 		.space	20
 5207      00000000 
 5207      00000000 
 5207      00000000 
 5207      00000000 
 5208              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 5209              		.align	2
 5210              		.set	.LANCHOR8,. + 0
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 196


 5213              	pxOverflowDelayedTaskList:
 5214 0000 00000000 		.space	4
 5215              		.section	.bss.uxPendedTicks,"aw",%nobits
 5216              		.align	2
 5217              		.set	.LANCHOR18,. + 0
 5220              	uxPendedTicks:
 5221 0000 00000000 		.space	4
 5222              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 5223              		.align	2
 5224              		.set	.LANCHOR4,. + 0
 5227              	pxReadyTasksLists:
 5228 0000 00000000 		.space	140
 5228      00000000 
 5228      00000000 
 5228      00000000 
 5228      00000000 
 5229              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 5230              		.align	2
 5231              		.set	.LANCHOR16,. + 0
 5234              	uxSchedulerSuspended:
 5235 0000 00000000 		.space	4
 5236              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 5237              		.align	2
 5238              		.set	.LANCHOR14,. + 0
 5241              	uxDeletedTasksWaitingCleanUp:
 5242 0000 00000000 		.space	4
 5243              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 5244              		.align	2
 5245              		.set	.LANCHOR9,. + 0
 5248              	uxCurrentNumberOfTasks:
 5249 0000 00000000 		.space	4
 5250              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5251              		.align	2
 5252              		.set	.LANCHOR10,. + 0
 5255              	pxCurrentTCB:
 5256 0000 00000000 		.space	4
 5257              		.section	.bss.xPendingReadyList,"aw",%nobits
 5258              		.align	2
 5259              		.set	.LANCHOR1,. + 0
 5262              	xPendingReadyList:
 5263 0000 00000000 		.space	20
 5263      00000000 
 5263      00000000 
 5263      00000000 
 5263      00000000 
 5264              		.section	.bss.xNumOfOverflows,"aw",%nobits
 5265              		.align	2
 5266              		.set	.LANCHOR17,. + 0
 5269              	xNumOfOverflows:
 5270 0000 00000000 		.space	4
 5271              		.section	.bss.xTickCount,"aw",%nobits
 5272              		.align	2
 5273              		.set	.LANCHOR15,. + 0
 5276              	xTickCount:
 5277 0000 00000000 		.space	4
 5278              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 5279              		.align	2
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 197


 5280              		.set	.LANCHOR3,. + 0
 5283              	xNextTaskUnblockTime:
 5284 0000 00000000 		.space	4
 5285              		.section	.rodata.str1.4,"aMS",%progbits,1
 5286              		.align	2
 5287              	.LC0:
 5288 0000 49444C45 		.ascii	"IDLE\000"
 5288      00
 5289              		.section	.bss.uxTaskNumber,"aw",%nobits
 5290              		.align	2
 5291              		.set	.LANCHOR12,. + 0
 5294              	uxTaskNumber:
 5295 0000 00000000 		.space	4
 5296              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 5297              		.align	2
 5298              		.set	.LANCHOR5,. + 0
 5301              	xDelayedTaskList1:
 5302 0000 00000000 		.space	20
 5302      00000000 
 5302      00000000 
 5302      00000000 
 5302      00000000 
 5303              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 5304              		.align	2
 5305              		.set	.LANCHOR6,. + 0
 5308              	xDelayedTaskList2:
 5309 0000 00000000 		.space	20
 5309      00000000 
 5309      00000000 
 5309      00000000 
 5309      00000000 
 5310              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 5311              		.align	2
 5312              		.set	.LANCHOR0,. + 0
 5315              	xSuspendedTaskList:
 5316 0000 00000000 		.space	20
 5316      00000000 
 5316      00000000 
 5316      00000000 
 5316      00000000 
 5317              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 5318              		.align	2
 5319              		.set	.LANCHOR13,. + 0
 5322              	uxTopReadyPriority:
 5323 0000 00000000 		.space	4
 5324              		.section	.bss.xYieldPending,"aw",%nobits
 5325              		.align	2
 5326              		.set	.LANCHOR19,. + 0
 5329              	xYieldPending:
 5330 0000 00000000 		.space	4
 5331              		.text
 5332              	.Letext0:
 5333              		.file 3 "d:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\lib\\gcc\\arm-none-eabi\\5.4
 5334              		.file 4 "d:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\mach
 5335              		.file 5 "d:\\program files (x86)\\gnu tools arm embedded\\5.4 2016q3\\arm-none-eabi\\include\\sys\
 5336              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 5337              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 198


 5338              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 5339              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 5340              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 199


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:21     .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:25     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:92     .text.prvTaskIsTaskSuspended:00000038 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:98     .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:102    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:135    .text.prvResetNextTaskUnblockTime:00000024 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:141    .text.prvInitialiseNewTask:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:145    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:268    .text.prvInitialiseTaskLists:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:272    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:338    .text.prvInitialiseTaskLists:00000048 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:350    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:354    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:459    .text.prvAddNewTaskToReadyList:0000008c $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:470    .text.prvDeleteTCB:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:474    .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:538    .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:542    .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:598    .text.prvCheckTasksWaitingTermination:00000038 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:605    .text.prvIdleTask:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:609    .text.prvIdleTask:00000000 prvIdleTask
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:649    .text.prvIdleTask:00000020 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:655    .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:659    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:760    .text.prvAddCurrentTaskToDelayedList:00000084 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:771    .text.xTaskCreateStatic:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:776    .text.xTaskCreateStatic:00000000 xTaskCreateStatic
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:915    .text.xTaskCreate:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:920    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1019   .text.vTaskDelete:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1024   .text.vTaskDelete:00000000 vTaskDelete
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1167   .text.vTaskDelete:000000b4 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1181   .text.uxTaskPriorityGet:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1186   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1222   .text.uxTaskPriorityGet:00000018 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1227   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1232   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1292   .text.uxTaskPriorityGetFromISR:0000002c $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1297   .text.vTaskPrioritySet:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1302   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1488   .text.vTaskPrioritySet:000000d8 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1496   .text.vTaskResume:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1501   .text.vTaskResume:00000000 vTaskResume
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1603   .text.vTaskResume:00000078 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1611   .text.xTaskResumeFromISR:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1616   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1752   .text.xTaskResumeFromISR:00000094 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1761   .text.vTaskStartScheduler:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1766   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1858   .text.vTaskStartScheduler:00000060 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1867   .text.vTaskEndScheduler:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1872   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1909   .text.vTaskEndScheduler:00000020 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1914   .text.vTaskSuspendAll:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1919   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 200


C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1936   .text.vTaskSuspendAll:0000000c $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1941   .text.xTaskGetTickCount:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1946   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1962   .text.xTaskGetTickCount:00000008 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1967   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1972   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:1995   .text.xTaskGetTickCountFromISR:0000000c $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2000   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2005   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2020   .text.uxTaskGetNumberOfTasks:00000008 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2025   .text.pcTaskGetName:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2030   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2074   .text.pcTaskGetName:00000024 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2079   .text.xTaskIncrementTick:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2084   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2290   .text.xTaskIncrementTick:000000f0 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2305   .text.xTaskResumeAll:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2310   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2495   .text.xTaskResumeAll:000000d4 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2508   .text.vTaskDelay:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2513   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2590   .text.vTaskDelay:00000048 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2596   .text.vTaskSwitchContext:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2601   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2722   .text.vTaskSwitchContext:00000080 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2731   .text.vTaskSuspend:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2736   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2892   .text.vTaskSuspend:000000c4 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2904   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2909   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2961   .text.vTaskPlaceOnEventList:0000002c $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2966   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:2971   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3058   .text.vTaskPlaceOnUnorderedEventList:00000054 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3064   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3069   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3170   .text.xTaskRemoveFromEventList:00000074 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3180   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3185   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3289   .text.vTaskRemoveFromUnorderedEventList:00000078 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3298   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3303   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3357   .text.vTaskSetTimeOutState:00000030 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3363   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3368   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3388   .text.vTaskInternalSetTimeOutState:00000010 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3394   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3399   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3533   .text.xTaskCheckForTimeOut:00000078 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3539   .text.vTaskMissedYield:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3544   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3559   .text.vTaskMissedYield:00000008 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3564   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3569   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3585   .text.xTaskGetCurrentTaskHandle:00000008 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3590   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3595   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 201


C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3626   .text.xTaskGetSchedulerState:00000018 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3632   .text.xTaskPriorityInherit:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3637   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3779   .text.xTaskPriorityInherit:000000b0 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3786   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3791   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3947   .text.xTaskPriorityDisinherit:000000a8 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3954   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:3959   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4114   .text.vTaskPriorityDisinheritAfterTimeout:000000b8 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4121   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4126   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4149   .text.uxTaskResetEventItemValue:00000014 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4154   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4159   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4185   .text.pvTaskIncrementMutexHeldCount:00000018 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4190   .text.ulTaskNotifyTake:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4195   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4288   .text.ulTaskNotifyTake:0000006c $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4294   .text.xTaskNotifyWait:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4299   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4414   .text.xTaskNotifyWait:00000090 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4420   .text.xTaskGenericNotify:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4425   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4490   .text.xTaskGenericNotify:0000003c $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4655   .text.xTaskGenericNotify:000000f0 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4663   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4668   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4752   .text.xTaskGenericNotifyFromISR:0000005c $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4937   .text.xTaskGenericNotifyFromISR:00000124 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4947   .text.vTaskNotifyGiveFromISR:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4952   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5113   .text.vTaskNotifyGiveFromISR:000000b8 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5125   .text.xTaskNotifyStateClear:00000000 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5130   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5182   .text.xTaskNotifyStateClear:0000002c $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5255   .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5188   .bss.pxDelayedTaskList:00000000 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5192   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5195   .bss.xSchedulerRunning:00000000 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5199   .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5202   .bss.xTasksWaitingTermination:00000000 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5206   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5209   .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5213   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5216   .bss.uxPendedTicks:00000000 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5220   .bss.uxPendedTicks:00000000 uxPendedTicks
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5223   .bss.pxReadyTasksLists:00000000 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5227   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5230   .bss.uxSchedulerSuspended:00000000 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5234   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5237   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5241   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5244   .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5248   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5251   .bss.pxCurrentTCB:00000000 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5258   .bss.xPendingReadyList:00000000 $d
ARM GAS  C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s 			page 202


C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5262   .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5265   .bss.xNumOfOverflows:00000000 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5269   .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5272   .bss.xTickCount:00000000 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5276   .bss.xTickCount:00000000 xTickCount
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5279   .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5283   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5286   .rodata.str1.4:00000000 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5290   .bss.uxTaskNumber:00000000 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5294   .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5297   .bss.xDelayedTaskList1:00000000 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5301   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5304   .bss.xDelayedTaskList2:00000000 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5308   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5311   .bss.xSuspendedTaskList:00000000 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5315   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5318   .bss.uxTopReadyPriority:00000000 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5322   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5325   .bss.xYieldPending:00000000 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:5329   .bss.xYieldPending:00000000 xYieldPending
                     .debug_frame:00000010 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4495   .text.xTaskGenericNotify:00000041 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4495   .text.xTaskGenericNotify:00000042 $t
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4757   .text.xTaskGenericNotifyFromISR:00000061 $d
C:\Users\xiaofei\AppData\Local\Temp\ccQ4Ro6V.s:4757   .text.xTaskGenericNotifyFromISR:00000062 $t

UNDEFINED SYMBOLS
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortFree
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xPortStartScheduler
vPortEndScheduler
